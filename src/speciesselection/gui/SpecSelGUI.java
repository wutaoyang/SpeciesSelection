package speciesselection.gui;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.nio.file.Paths;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileView;
import preprocessing.FileList;
import preprocessing.FileUtils;
import preprocessing.MutableBoolean;
import preprocessing.Options;
import preprocessing.PlotPoints;
import preprocessing.ProbabilityCalculator;
import preprocessing.ProblemSpecies;
import preprocessing.SubSetGenerator;
import speciesselection.Constants;
import speciesselection.ReadFile;
import speciesselection.SpeciesSelection;

/**
 * GUI for Species Selection 2.0 software
 *
 * @author mre16utu
 */
public class SpecSelGUI extends javax.swing.JFrame {

    // variable to get result of file open/save dialog
    private int fileChooserResult;
    private String workingDir;
    private String processFileName, analyseFileName, probabilitiesFileName;
    private boolean processCancelled, analyseCancelled, probabilitiesCancelled;
    
    // Global member variables 
    private FileList fileList, resFileList;
    private ProblemSpecies problemSpec;
    private final ArrayList<Future> futures;
    private CountDownLatch latch;

    /**
     * Creates new form SpecSelGUI
     */
    public SpecSelGUI() {
        initComponents();
        jButtonCancelP.setVisible(false);
        jButtonPViewResults.setVisible(false);
        jButtonCancelA.setVisible(false);
        jButtonDeleteFilesA.setVisible(false);
        workingDir = System.getProperty("user.dir");
        initSpinners();
        initAbout();
        addJSpinnerNoSubsetsKeyTypedListener();
        addJSpinnerSubsetSizeKeyTypedListener();
        futures = new ArrayList<>();
    }
    
    /**
     * sets the text in the About tab of the UI
     */
    private void initAbout(){
        jEditorPaneAbout.setText(Constants.ABOUT);
        jEditorPaneAbout.setCaretPosition(0);
    }

    /**
     * Initialise values in the probabilities tab spinners to ensure valid 
     * values in relation to currently selected data file
     */
    private void initSpinners() {
        try {
            // initialise max value of probabilities tab spinner for subset 
            // size based upon default filename
            String probsFilename = jTextFieldFilePathProb.getText();
            if (!probsFilename.equals("")) {
                File file = new File(probsFilename);
                if (FileUtils.fileExists(file)) {
                    setNumberSpinnerMax(jSpinnerSubsetSize, noSpeciesInFile(probsFilename) - 1);
                }
            }

            // initialise max value of analyse tab spinner for initial 
            // no species based upon default filename
            String analyseFilename = jTextFieldDataFilePathA.getText();
            if (!analyseFilename.equals("")) {
                File file = new File(analyseFilename);
                if (FileUtils.fileExists(file)) {
                    setNumberSpinnerMax(jSpinnerInitialNoSpecies, noSpeciesInFile(analyseFilename) - 1);
                }
            }
        } catch (FileNotFoundException e) {
            System.out.println("FileNotFoundException in SpecSelGUI.initSpinner()");
        }
    }

    /**
     * Creates an executor service that will run processes at a rate of one per 
     * core, while leaving 1 core free for the UI
     * @return 
     */
    private ExecutorService initialiseExecutorService() {
        int cores = Math.max(1, Runtime.getRuntime().availableProcessors() - 1);
        System.err.println("Number Cores: " + cores);
        return Executors.newFixedThreadPool(cores);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelProcess = new javax.swing.JPanel();
        jPanelTop = new javax.swing.JPanel();
        jButtonSelectDataFileP = new javax.swing.JButton();
        jTextFieldDataFilePath = new javax.swing.JTextField();
        jButtonProcess = new javax.swing.JButton();
        jCheckBoxTruncate = new javax.swing.JCheckBox();
        jButtonCancelP = new javax.swing.JButton();
        jButtonPViewResults = new javax.swing.JButton();
        jPanelBottom = new javax.swing.JPanel();
        jLabelProcessTime = new javax.swing.JLabel();
        jPanelWest = new javax.swing.JPanel();
        jLabelOption = new javax.swing.JLabel();
        jComboBoxOption = new javax.swing.JComboBox<>();
        jLabelSpecThresh = new javax.swing.JLabel();
        jSpinnerM = new javax.swing.JSpinner();
        jLabelM = new javax.swing.JLabel();
        jLabelSDThresh = new javax.swing.JLabel();
        jSpinnerX = new javax.swing.JSpinner();
        jLabelX = new javax.swing.JLabel();
        jLabelAreaPrecThresh = new javax.swing.JLabel();
        jSpinnerY = new javax.swing.JSpinner();
        jLabelY = new javax.swing.JLabel();
        jTextArea1 = new javax.swing.JTextArea();
        jPanelAnalyse = new javax.swing.JPanel();
        jPanelUpper = new javax.swing.JPanel();
        jButtonSelectDataFileA = new javax.swing.JButton();
        jTextFieldDataFilePathA = new javax.swing.JTextField();
        jLabelNoSpec = new javax.swing.JLabel();
        jSpinnerInitialNoSpecies = new javax.swing.JSpinner();
        jLabelAllowedDiv = new javax.swing.JLabel();
        jSpinnerAllowableExpDivergencePct = new javax.swing.JSpinner();
        jPanelRadioButtons = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jRadioButtonNone = new javax.swing.JRadioButton();
        jRadioButtonFinal = new javax.swing.JRadioButton();
        jRadioButtonAll = new javax.swing.JRadioButton();
        jButtonProblemSpecies = new javax.swing.JButton();
        jButtonCancelA = new javax.swing.JButton();
        jLabelProbSpec = new javax.swing.JLabel();
        jTextFieldProblemSpecies = new javax.swing.JTextField();
        jButtonDeleteFilesA = new javax.swing.JButton();
        jPanelLower = new javax.swing.JPanel();
        jScrollPanePoints = new javax.swing.JScrollPane();
        jTextAreaPoints = new javax.swing.JTextArea();
        jScrollPaneKey = new javax.swing.JScrollPane();
        jTextAreaKey = new javax.swing.JTextArea();
        jLabelProcessCompletedTimeA = new javax.swing.JLabel();
        jLabelProcessTimeA = new javax.swing.JLabel();
        jButtonAGenerateSubsetMinusPS = new javax.swing.JButton();
        jButtonAUpdateProblemSpecies = new javax.swing.JButton();
        jPanelProbability = new javax.swing.JPanel();
        jPanelProbUpper = new javax.swing.JPanel();
        jButtonSelectDataFileProb = new javax.swing.JButton();
        jTextFieldFilePathProb = new javax.swing.JTextField();
        jLabelNoSubsets = new javax.swing.JLabel();
        jSpinnerNoSubsets = new javax.swing.JSpinner();
        jLabelSubsetSize = new javax.swing.JLabel();
        jSpinnerSubsetSize = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaSubsetFiles = new javax.swing.JTextArea();
        jPanelRight = new javax.swing.JPanel();
        jButtonGenerate = new javax.swing.JButton();
        jCheckBoxTruncateProbs = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jSpinnerTruncateThreshold = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jSpinnerProbsThreshold = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jButtonRunSubsets = new javax.swing.JButton();
        jButtonCancelProb = new javax.swing.JButton();
        jButtonDeleteFiles = new javax.swing.JButton();
        jButtonViewResults = new javax.swing.JButton();
        jLabelFinishedThreads = new javax.swing.JLabel();
        jLabelProcessTimeProb = new javax.swing.JLabel();
        jLabelErrorProbs = new javax.swing.JLabel();
        jCheckBoxOverwriteProbs = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jLabelMaxTime = new javax.swing.JLabel();
        jSpinnerMaxTime = new javax.swing.JSpinner();
        jLabelSecs = new javax.swing.JLabel();
        jPanelAbout = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPaneAbout = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Species Selection ");
        setResizable(false);

        jPanelProcess.setPreferredSize(new java.awt.Dimension(600, 400));
        jPanelProcess.setLayout(new java.awt.BorderLayout());

        jPanelTop.setPreferredSize(new java.awt.Dimension(782, 60));

        jButtonSelectDataFileP.setText("Select Data File");
        jButtonSelectDataFileP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectDataFilePActionPerformed(evt);
            }
        });

        jButtonProcess.setText("Process");
        jButtonProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonProcessActionPerformed(evt);
            }
        });

        jCheckBoxTruncate.setSelected(true);
        jCheckBoxTruncate.setText("Truncate Results");

        jButtonCancelP.setText("Cancel");
        jButtonCancelP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelPActionPerformed(evt);
            }
        });

        jButtonPViewResults.setText("View Results");
        jButtonPViewResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPViewResultsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelTopLayout = new javax.swing.GroupLayout(jPanelTop);
        jPanelTop.setLayout(jPanelTopLayout);
        jPanelTopLayout.setHorizontalGroup(
            jPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTopLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonSelectDataFileP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldDataFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxTruncate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 3, Short.MAX_VALUE)
                .addGroup(jPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonProcess, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                    .addComponent(jButtonPViewResults, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                    .addComponent(jButtonCancelP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelTopLayout.setVerticalGroup(
            jPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTopLayout.createSequentialGroup()
                .addGroup(jPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSelectDataFileP)
                    .addComponent(jTextFieldDataFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonProcess)
                    .addComponent(jCheckBoxTruncate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCancelP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonPViewResults)
                .addContainerGap())
        );

        jPanelProcess.add(jPanelTop, java.awt.BorderLayout.PAGE_START);

        jPanelBottom.setMinimumSize(new java.awt.Dimension(100, 30));
        jPanelBottom.setPreferredSize(new java.awt.Dimension(782, 30));

        jLabelProcessTime.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        javax.swing.GroupLayout jPanelBottomLayout = new javax.swing.GroupLayout(jPanelBottom);
        jPanelBottom.setLayout(jPanelBottomLayout);
        jPanelBottomLayout.setHorizontalGroup(
            jPanelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBottomLayout.createSequentialGroup()
                .addGap(0, 628, Short.MAX_VALUE)
                .addComponent(jLabelProcessTime, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanelBottomLayout.setVerticalGroup(
            jPanelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelProcessTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
        );

        jPanelProcess.add(jPanelBottom, java.awt.BorderLayout.PAGE_END);

        jPanelWest.setPreferredSize(new java.awt.Dimension(150, 407));

        jLabelOption.setText("Process Option");

        jComboBoxOption.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A", "B", "BN", "BF", "BFN", "C", "CF", "CN", "CFN" }));
        jComboBoxOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxOptionActionPerformed(evt);
            }
        });

        jLabelSpecThresh.setText("Species Threshold");

        jSpinnerM.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        jSpinnerM.setEnabled(false);

        jLabelM.setText("m");

        jLabelSDThresh.setText("SD Threshold");

        jSpinnerX.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, null, 0.01d));
        jSpinnerX.setEnabled(false);

        jLabelX.setText("x");

        jLabelAreaPrecThresh.setText("Area/Prec Threshold");

        jSpinnerY.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, null, 0.01d));
        jSpinnerY.setEnabled(false);

        jLabelY.setText("y");

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(240, 240, 240));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("Key:\nA:standard\nB:trait based excl.\nC:area/prec excl.\nF:impose sensitivity\nN:normalise sens.");
        jTextArea1.setAutoscrolls(false);

        javax.swing.GroupLayout jPanelWestLayout = new javax.swing.GroupLayout(jPanelWest);
        jPanelWest.setLayout(jPanelWestLayout);
        jPanelWestLayout.setHorizontalGroup(
            jPanelWestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelWestLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelWestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelAreaPrecThresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelSDThresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelWestLayout.createSequentialGroup()
                        .addGroup(jPanelWestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanelWestLayout.createSequentialGroup()
                                .addGroup(jPanelWestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSpinnerY, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jSpinnerX)
                                    .addGroup(jPanelWestLayout.createSequentialGroup()
                                        .addGroup(jPanelWestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jComboBoxOption, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jSpinnerM, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelWestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelY, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelX, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelM, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabelSpecThresh)
                            .addComponent(jLabelOption)
                            .addComponent(jTextArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(0, 17, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelWestLayout.setVerticalGroup(
            jPanelWestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelWestLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabelOption)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxOption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabelSpecThresh)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelWestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelM))
                .addGap(18, 18, 18)
                .addComponent(jLabelSDThresh)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelWestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelX))
                .addGap(18, 18, 18)
                .addComponent(jLabelAreaPrecThresh)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelWestLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelY))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addComponent(jTextArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        jPanelProcess.add(jPanelWest, java.awt.BorderLayout.LINE_START);

        jTabbedPane1.addTab("Process", jPanelProcess);

        jButtonSelectDataFileA.setText("Select Data File");
        jButtonSelectDataFileA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectDataFileAActionPerformed(evt);
            }
        });

        jLabelNoSpec.setText("Initial No of Species:");

        jSpinnerInitialNoSpecies.setModel(new javax.swing.SpinnerNumberModel(3, 3, null, 1));

        jLabelAllowedDiv.setText("Allowable % Exp divergence:");

        jSpinnerAllowableExpDivergencePct.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        jPanelRadioButtons.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        jLabel4.setText("Output for:");

        buttonGroup1.add(jRadioButtonNone);
        jRadioButtonNone.setText("None");

        buttonGroup1.add(jRadioButtonFinal);
        jRadioButtonFinal.setSelected(true);
        jRadioButtonFinal.setText("Final");

        buttonGroup1.add(jRadioButtonAll);
        jRadioButtonAll.setText("All");

        javax.swing.GroupLayout jPanelRadioButtonsLayout = new javax.swing.GroupLayout(jPanelRadioButtons);
        jPanelRadioButtons.setLayout(jPanelRadioButtonsLayout);
        jPanelRadioButtonsLayout.setHorizontalGroup(
            jPanelRadioButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRadioButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelRadioButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                    .addGroup(jPanelRadioButtonsLayout.createSequentialGroup()
                        .addGroup(jPanelRadioButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonFinal)
                            .addComponent(jRadioButtonAll)
                            .addComponent(jRadioButtonNone))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelRadioButtonsLayout.setVerticalGroup(
            jPanelRadioButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelRadioButtonsLayout.createSequentialGroup()
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButtonNone)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonFinal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonAll))
        );

        jButtonProblemSpecies.setText("Find Problem Species");
        jButtonProblemSpecies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonProblemSpeciesActionPerformed(evt);
            }
        });

        jButtonCancelA.setText("Cancel");
        jButtonCancelA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelAActionPerformed(evt);
            }
        });

        jLabelProbSpec.setText("Problem Species:");
        jLabelProbSpec.setMaximumSize(new java.awt.Dimension(107, 14));
        jLabelProbSpec.setMinimumSize(new java.awt.Dimension(107, 14));
        jLabelProbSpec.setPreferredSize(new java.awt.Dimension(107, 14));

        jTextFieldProblemSpecies.setEditable(false);
        jTextFieldProblemSpecies.setText("results");

        jButtonDeleteFilesA.setText("Delete Files");
        jButtonDeleteFilesA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteFilesAActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelUpperLayout = new javax.swing.GroupLayout(jPanelUpper);
        jPanelUpper.setLayout(jPanelUpperLayout);
        jPanelUpperLayout.setHorizontalGroup(
            jPanelUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUpperLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonSelectDataFileA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldDataFilePathA, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanelRadioButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonCancelA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonProblemSpecies, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                    .addComponent(jButtonDeleteFilesA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanelUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelUpperLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanelUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanelUpperLayout.createSequentialGroup()
                            .addGroup(jPanelUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabelAllowedDiv, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabelNoSpec, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanelUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jSpinnerInitialNoSpecies, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jSpinnerAllowableExpDivergencePct, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(jPanelUpperLayout.createSequentialGroup()
                            .addComponent(jLabelProbSpec, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextFieldProblemSpecies, javax.swing.GroupLayout.PREFERRED_SIZE, 672, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap()))
        );
        jPanelUpperLayout.setVerticalGroup(
            jPanelUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUpperLayout.createSequentialGroup()
                .addGroup(jPanelUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonSelectDataFileA)
                        .addComponent(jTextFieldDataFilePathA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanelRadioButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelUpperLayout.createSequentialGroup()
                        .addComponent(jButtonProblemSpecies)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCancelA)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDeleteFilesA)))
                .addGap(0, 46, Short.MAX_VALUE))
            .addGroup(jPanelUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelUpperLayout.createSequentialGroup()
                    .addGap(46, 46, 46)
                    .addGroup(jPanelUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelNoSpec)
                        .addComponent(jSpinnerInitialNoSpecies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanelUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelAllowedDiv)
                        .addComponent(jSpinnerAllowableExpDivergencePct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(15, 15, 15)
                    .addGroup(jPanelUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelProbSpec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldProblemSpecies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jTextAreaPoints.setEditable(false);
        jTextAreaPoints.setColumns(20);
        jTextAreaPoints.setRows(5);
        jScrollPanePoints.setViewportView(jTextAreaPoints);

        jTextAreaKey.setEditable(false);
        jTextAreaKey.setBackground(new java.awt.Color(240, 240, 240));
        jTextAreaKey.setColumns(20);
        jTextAreaKey.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jTextAreaKey.setRows(5);
        jTextAreaKey.setText("Key:\nX        - Number of species in DataFile\nY        - MinSpecSetFamily (MSSF) size\nMargin   - Y / predicted Y (Exponential Curve fitting)\nDataFile - name of subset file processed\nTime     - HH:MM:SS.ss time taken to generate MSSF");
        jScrollPaneKey.setViewportView(jTextAreaKey);

        jLabelProcessCompletedTimeA.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        jLabelProcessTimeA.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelProcessTimeA.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jButtonAGenerateSubsetMinusPS.setText("Generate Subset -PS");
        jButtonAGenerateSubsetMinusPS.setEnabled(false);
        jButtonAGenerateSubsetMinusPS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAGenerateSubsetMinusPSActionPerformed(evt);
            }
        });

        jButtonAUpdateProblemSpecies.setText("Update Problem Species");
        jButtonAUpdateProblemSpecies.setEnabled(false);
        jButtonAUpdateProblemSpecies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAUpdateProblemSpeciesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelLowerLayout = new javax.swing.GroupLayout(jPanelLower);
        jPanelLower.setLayout(jPanelLowerLayout);
        jPanelLowerLayout.setHorizontalGroup(
            jPanelLowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLowerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelLowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonAUpdateProblemSpecies, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonAGenerateSubsetMinusPS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanelLowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelLowerLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPanePoints, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanelLowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPaneKey, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLowerLayout.createSequentialGroup()
                            .addGap(0, 174, Short.MAX_VALUE)
                            .addGroup(jPanelLowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabelProcessTimeA, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelProcessCompletedTimeA, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addContainerGap()))
        );
        jPanelLowerLayout.setVerticalGroup(
            jPanelLowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLowerLayout.createSequentialGroup()
                .addContainerGap(156, Short.MAX_VALUE)
                .addComponent(jButtonAUpdateProblemSpecies)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonAGenerateSubsetMinusPS)
                .addGap(117, 117, 117))
            .addGroup(jPanelLowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelLowerLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanelLowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPanePoints)
                        .addGroup(jPanelLowerLayout.createSequentialGroup()
                            .addComponent(jScrollPaneKey, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 114, Short.MAX_VALUE)
                            .addComponent(jLabelProcessCompletedTimeA, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabelProcessTimeA, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap()))
        );

        javax.swing.GroupLayout jPanelAnalyseLayout = new javax.swing.GroupLayout(jPanelAnalyse);
        jPanelAnalyse.setLayout(jPanelAnalyseLayout);
        jPanelAnalyseLayout.setHorizontalGroup(
            jPanelAnalyseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAnalyseLayout.createSequentialGroup()
                .addGroup(jPanelAnalyseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelLower, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelUpper, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelAnalyseLayout.setVerticalGroup(
            jPanelAnalyseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAnalyseLayout.createSequentialGroup()
                .addComponent(jPanelUpper, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelLower, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(130, 130, 130))
        );

        jTabbedPane1.addTab("Analyse", jPanelAnalyse);

        jButtonSelectDataFileProb.setText("Select Data File");
        jButtonSelectDataFileProb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectDataFileProbActionPerformed(evt);
            }
        });

        jLabelNoSubsets.setText("No. Subsets:");

        jSpinnerNoSubsets.setModel(new javax.swing.SpinnerNumberModel(10, 1, null, 1));
        jSpinnerNoSubsets.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerNoSubsetsStateChanged(evt);
            }
        });

        jLabelSubsetSize.setText("Subset Size:");

        jSpinnerSubsetSize.setModel(new javax.swing.SpinnerNumberModel(30, 12, null, 1));
        jSpinnerSubsetSize.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerSubsetSizeStateChanged(evt);
            }
        });

        jTextAreaSubsetFiles.setColumns(20);
        jTextAreaSubsetFiles.setRows(5);
        jScrollPane1.setViewportView(jTextAreaSubsetFiles);

        javax.swing.GroupLayout jPanelProbUpperLayout = new javax.swing.GroupLayout(jPanelProbUpper);
        jPanelProbUpper.setLayout(jPanelProbUpperLayout);
        jPanelProbUpperLayout.setHorizontalGroup(
            jPanelProbUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelProbUpperLayout.createSequentialGroup()
                .addGroup(jPanelProbUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelProbUpperLayout.createSequentialGroup()
                        .addGroup(jPanelProbUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelProbUpperLayout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jButtonSelectDataFileProb)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldFilePathProb, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelProbUpperLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanelProbUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanelProbUpperLayout.createSequentialGroup()
                                        .addComponent(jLabelSubsetSize, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jSpinnerSubsetSize, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanelProbUpperLayout.createSequentialGroup()
                                        .addComponent(jLabelNoSubsets, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jSpinnerNoSubsets, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanelProbUpperLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        jPanelProbUpperLayout.setVerticalGroup(
            jPanelProbUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelProbUpperLayout.createSequentialGroup()
                .addGroup(jPanelProbUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSelectDataFileProb)
                    .addComponent(jTextFieldFilePathProb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelProbUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNoSubsets)
                    .addComponent(jSpinnerNoSubsets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelProbUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSubsetSize)
                    .addComponent(jSpinnerSubsetSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButtonGenerate.setText("Generate Subsets");
        jButtonGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerateActionPerformed(evt);
            }
        });

        jCheckBoxTruncateProbs.setSelected(true);
        jCheckBoxTruncateProbs.setText("Truncate Results");

        jSpinnerTruncateThreshold.setModel(new javax.swing.SpinnerNumberModel(3, 1, 10, 1));

        jLabel1.setText("Truncate Threshold");

        jSpinnerProbsThreshold.setModel(new javax.swing.SpinnerNumberModel(0.1d, 0.0d, 1.0d, 0.01d));

        jLabel2.setText("Probability Threshold");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(5, 5, 5)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSpinnerProbsThreshold)
                    .addComponent(jSpinnerTruncateThreshold, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jSpinnerTruncateThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerProbsThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap())
        );

        jButtonRunSubsets.setText("Run Subsets");
        jButtonRunSubsets.setEnabled(false);
        jButtonRunSubsets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRunSubsetsActionPerformed(evt);
            }
        });

        jButtonCancelProb.setText("Cancel");
        jButtonCancelProb.setEnabled(false);
        jButtonCancelProb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelProbActionPerformed(evt);
            }
        });

        jButtonDeleteFiles.setText("Delete Files");
        jButtonDeleteFiles.setEnabled(false);
        jButtonDeleteFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteFilesActionPerformed(evt);
            }
        });

        jButtonViewResults.setText("View Probabilities");
        jButtonViewResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonViewResultsActionPerformed(evt);
            }
        });

        jLabelProcessTimeProb.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jLabelErrorProbs.setFont(new java.awt.Font("Calibri", 1, 22)); // NOI18N
        jLabelErrorProbs.setForeground(new java.awt.Color(204, 0, 0));

        jCheckBoxOverwriteProbs.setSelected(true);
        jCheckBoxOverwriteProbs.setText("Overwrite probabilities.txt?");

        jLabelMaxTime.setText("Max Time:");

        jSpinnerMaxTime.setModel(new javax.swing.SpinnerNumberModel(10, 10, null, 1));

        jLabelSecs.setText("Secs");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelMaxTime)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinnerMaxTime, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelSecs)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabelMaxTime)
                .addComponent(jSpinnerMaxTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabelSecs))
        );

        javax.swing.GroupLayout jPanelRightLayout = new javax.swing.GroupLayout(jPanelRight);
        jPanelRight.setLayout(jPanelRightLayout);
        jPanelRightLayout.setHorizontalGroup(
            jPanelRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRightLayout.createSequentialGroup()
                .addGroup(jPanelRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelErrorProbs, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelRightLayout.createSequentialGroup()
                        .addGap(194, 194, 194)
                        .addGroup(jPanelRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelFinishedThreads, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelProcessTimeProb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanelRightLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanelRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonDeleteFiles, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonCancelProb, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxTruncateProbs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonGenerate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxOverwriteProbs, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                            .addComponent(jButtonRunSubsets, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonViewResults, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanelRightLayout.setVerticalGroup(
            jPanelRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelRightLayout.createSequentialGroup()
                .addGroup(jPanelRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonGenerate)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jCheckBoxTruncateProbs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxOverwriteProbs)
                .addGap(18, 18, 18)
                .addComponent(jButtonRunSubsets)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCancelProb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonDeleteFiles)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonViewResults)
                .addGap(34, 34, 34)
                .addComponent(jLabelErrorProbs, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jLabelFinishedThreads, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelProcessTimeProb, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(105, 105, 105))
        );

        javax.swing.GroupLayout jPanelProbabilityLayout = new javax.swing.GroupLayout(jPanelProbability);
        jPanelProbability.setLayout(jPanelProbabilityLayout);
        jPanelProbabilityLayout.setHorizontalGroup(
            jPanelProbabilityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelProbabilityLayout.createSequentialGroup()
                .addComponent(jPanelProbUpper, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelRight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelProbabilityLayout.setVerticalGroup(
            jPanelProbabilityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelProbUpper, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanelRight, javax.swing.GroupLayout.PREFERRED_SIZE, 497, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Probability", jPanelProbability);

        jScrollPane2.setBackground(new java.awt.Color(109, 109, 109));

        jEditorPaneAbout.setEditable(false);
        jEditorPaneAbout.setBackground(new java.awt.Color(240, 240, 240));
        jEditorPaneAbout.setBorder(null);
        jEditorPaneAbout.setContentType("text/html"); // NOI18N
        jEditorPaneAbout.setText("<html><b>Species Selection Version 2.0</b> - a product of the University of East Anglia, Norwich, England<br>Software produced by:<br>Taoyang Wu - Mar 2014 & Feb 2016<br>Stephen Whiddett -  Jan 2018<br><br>Note: Input files must be in same directory at SpeciesSelection.jar and all output files are written to that same directory.<br><br><b>Process</b> - Use this tab for Species Selection. Various Process Options are available. Please see the ReadMe file for details. Option A performs standard Species Selection. There is an option to truncate results. If selected, this will generate output until 3 consecutive increases in minimum mean sensitivity are detected. No truncation produces full results output.<br><br><b>Analyse</b> - This tab allows 'Problem Species' (PS), that cause greater than exponential growth to the processing time of a Species Selection dataset, to be identified. This is achieved by comparing MinSpecSetFamily size to that predicted by an exponental curve fitted to the previous data points. Initial No of Species should be set to a value processing takes a short amount of time. Allowable % Exp divergence should be low on an initial run but could be increased on subsequent runs if too many PS are detected.<br><br><b>Probability</b> - Calculates the probability that each species will appear in an optimal result set when a Species Selection dataset is randomly sampled for subsets of the specified size and number. Truncation is allowed and the number of min mean sensitivity increases required prior to truncation can be specified. The default is 3. A probability threshold is also provided. Species with a maximum probability of inclusion below this threshold will be excluded from the subset of species written out to 'filename'_ProbsSet.txt. The default is 0.1. The option is available to overwrite that previous probabilities txt file. If unselected, the user can specified a filename for the output. Delete Files will remove subset and subset results files but will leave the probabilities file alone. View Results will open that last saved probabilities file in notepad.<br><br></html>");
        jEditorPaneAbout.setCaretPosition(0);
        jScrollPane2.setViewportView(jEditorPaneAbout);

        javax.swing.GroupLayout jPanelAboutLayout = new javax.swing.GroupLayout(jPanelAbout);
        jPanelAbout.setLayout(jPanelAboutLayout);
        jPanelAboutLayout.setHorizontalGroup(
            jPanelAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAboutLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 789, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelAboutLayout.setVerticalGroup(
            jPanelAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAboutLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("About", jPanelAbout);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 814, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonProcessActionPerformed
        
        try {
            // check for existence of input file before attempting to process
            processFileName = jTextFieldDataFilePath.getText();
            if (!FileUtils.fileExists(new File(processFileName))) {
                ReadFile.infoBox("File " + processFileName + " does not exist", "Process Error");
                return;
            }
            // diable buttons while process is running
            jButtonProcess.setEnabled(false);
            jButtonPViewResults.setVisible(false);

            // Clear any existing plot
            BorderLayout layout = (BorderLayout) jPanelProcess.getLayout();
            Component center = layout.getLayoutComponent(BorderLayout.CENTER);
            if (center != null) {
                jPanelProcess.remove(center);
                jPanelProcess.repaint();
            }

            //Check for results truncation
            boolean truncate = !jCheckBoxTruncate.isSelected();
            // get selected option from dropdown and spinner values on Process tab
            String option = jComboBoxOption.getSelectedItem().toString();
            int specThresholdM = (int) jSpinnerM.getValue();
            double sdThresholdX = (double) jSpinnerX.getValue();
            double areaOrPrecisionY = (double) jSpinnerY.getValue();

            //run solution and draw graph
            SpeciesSelection specSel = new SpeciesSelection(processFileName, truncate, 3, option, specThresholdM, sdThresholdX, areaOrPrecisionY);
            Thread t = new Thread(specSel);
            t.start();
            // start the timer for the process
            timeProcess(specSel, t);

            // Create listener to enable view results button once process finishes successfully
            specSel.addPropertyChangeListener(new PropertyChangeListener() {
                @Override
                public void propertyChange(PropertyChangeEvent evt) {
                    if (!processCancelled && specSel.isSuccess()) {
                        jButtonPViewResults.setVisible(true);
                    }
                }
            });
        } catch (Exception e) {
            System.out.println("Error Processing Data: " + e);
        }
        System.out.println("Process Complete");
    }//GEN-LAST:event_jButtonProcessActionPerformed

    /**
     * Calculates and displays running time of process on the Process tab while 
     * it is not finished or cancelled
     * Ensures Process/Cancel buttons are disabled/enabled when appropriate
     * @param specSel
     * @param t 
     */
    private void timeProcess(SpeciesSelection specSel, Thread t) {
        // initialise cancelled variable as false and display the cancel button
        processCancelled = false;
        jButtonCancelP.setVisible(true);
        // get start time of process
        long startTime = System.nanoTime();
        new Thread() {
            @Override
            public void run() {
                while (!specSel.isFinished() && !processCancelled) {
                    double seconds = (System.nanoTime() - startTime) / 1000000000.0;
                    jLabelProcessTime.setText("Processing Time: " + toTimeString(seconds));
                    try {
                        Thread.sleep(91);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(SpecSelGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                // when process ends hide the cancel button and enable process button
                jButtonCancelP.setVisible(false);
                jButtonProcess.setEnabled(true);
                // If processing finished then display result graph, else the 
                // process was cancelled so interrupt the processing thread.
                if (specSel.isFinished()) {
                    ArrayList<Double> result = specSel.getResult();
                    drawGraph(result);
                } else {
                    t.interrupt();
                }
            }
        }.start();
    }

    /**
     * Converts a double value of seconds to HH:MM:SS.ss format
     * @param seconds
     * @return 
     */
    private String toTimeString(double seconds) {
        int hours = (int) seconds / 3600;
        int minutes = ((int) seconds % 3600) / 60;
        seconds = seconds % 60;
        DecimalFormat df1 = new DecimalFormat("00");
        DecimalFormat df2 = new DecimalFormat("00.00");
        String time = df1.format(hours) + ":"
                + df1.format(minutes) + ":"
                + df2.format(seconds);
        return time;
    }

    /**
     * Plots graph of minimum mean sensitivies on the Process tab
     * @param meanSensitivities 
     */
    private void drawGraph(ArrayList<Double> meanSensitivities) {
        // Draw the graph to GUI
        JPanel panel = jPanelProcess;
        Dimension dim = new Dimension(600, 400);
        GraphPanel graph = new GraphPanel(meanSensitivities, "SpecSet Size", "Minimum Mean Sensitivity");
        graph.setPreferredSize(dim);
        panel.add(graph, BorderLayout.CENTER);
        pack();
        panel.setVisible(true);
    }

    private void jButtonSelectDataFilePActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectDataFilePActionPerformed
        jButtonPViewResults.setVisible(false);
        selectDataFile(jTextFieldDataFilePath, null);
    }//GEN-LAST:event_jButtonSelectDataFilePActionPerformed

    /**
     * Allows user to select a file and puts the filename in relevant field
     * Optionally sets the max value of a spinner depending upon contents of the file
     * @param textField
     * @param spinner 
     */
    private void selectDataFile(JTextField textField, JSpinner spinner) {
        try {
            System.out.println("Loading data file");
            // prompt user to select text file containing album data
            String filename = getTextFilePath("LOAD");
            // proceed if file selected (not cancelled)
            if (fileChooserResult == JFileChooser.APPROVE_OPTION) {
                textField.setText(filename);
                if (null != spinner) {
                    setNumberSpinnerMax(spinner, noSpeciesInFile(filename) - 1);
                }
            }
        } catch (FileNotFoundException e) {
            System.out.println("Error Loading");
        }
    }

    /**
     * Counts number of rows (species) in the file, excluding the first row (header)
     * @param fileName
     * @return
     * @throws FileNotFoundException 
     */
    private int noSpeciesInFile(String fileName) throws FileNotFoundException {
        List<String> list = FileUtils.readFileToList(new File(fileName));
        return list.size() - 1;
    }

    /**
     * Sets the maximum value allowed in 'spinner' to 
     * Max of zero and 'value' (disallows negative values)
     * Ensures min value is not greater than max
     * @param spinner
     * @param value 
     */
    private void setNumberSpinnerMax(JSpinner spinner, int value) {
        SpinnerNumberModel model = (SpinnerNumberModel) spinner.getModel();
        int min = (int) model.getMinimum();
        int currentValue = (int) spinner.getValue();
        value = Math.max(0, value);// ensure value not negative

        if (min > value) {
            model.setMinimum(value);
        }
        if (currentValue > value) {
            model.setValue(value);
        }
        model.setMaximum(value);
    }

    private void jButtonCancelPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelPActionPerformed
        processCancelled = true;
        jButtonCancelP.setVisible(false);
    }//GEN-LAST:event_jButtonCancelPActionPerformed

    private void jButtonSelectDataFileAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectDataFileAActionPerformed
        selectDataFile(jTextFieldDataFilePathA, jSpinnerInitialNoSpecies);
    }//GEN-LAST:event_jButtonSelectDataFileAActionPerformed

    private void jButtonProblemSpeciesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonProblemSpeciesActionPerformed
        try {
            // Check the selected file exists
            analyseFileName = jTextFieldDataFilePathA.getText();
            File file = new File(analyseFileName);
            if(!validateFile(file, "Analyse"))
            {
                return;//escapes here is file doesnt exist or is invalid format
            }

            // Disable the process button so that it cannot be clicked twice
            jButtonProblemSpecies.setEnabled(false);
            // Clear text fields
            jLabelProcessCompletedTimeA.setText("");
            jTextAreaPoints.setText("");
        
            jTextFieldProblemSpecies.setText("...");
            jSpinnerInitialNoSpecies.commitEdit();
            int initialNoSpecies = (Integer) jSpinnerInitialNoSpecies.getValue();
            jSpinnerAllowableExpDivergencePct.commitEdit();
            int expMarginPct = (Integer) jSpinnerAllowableExpDivergencePct.getValue();
            problemSpec = new ProblemSpecies(file, initialNoSpecies, expMarginPct, getOption());

            Thread t = new Thread(problemSpec);
            t.start();
            long startTime = System.nanoTime();
            analyseCancelled = false;
            jButtonCancelA.setVisible(true);

            new Thread() {
                @Override
                public void run() {
                    double seconds;
                    while (!problemSpec.isFinished() && !analyseCancelled) {
                        try {
                            seconds = (System.nanoTime() - startTime) / 1000000000.0;
                            jLabelProcessTimeA.setText("Processing Time: " + toTimeString(seconds));
                            Thread.sleep(91);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(SpecSelGUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    // print results to GUI
                    jTextFieldProblemSpecies.setText(problemSpec.toString());

                    jButtonCancelA.setVisible(false);
                    jButtonDeleteFilesA.setVisible(true);
                    jButtonProblemSpecies.setEnabled(true);
                    // If processing finished then display results, else the 
                    // process was cancelled so interrupt the processing thread.
                    if (problemSpec.isFinished()) {
                        PlotPoints points = problemSpec.getPoints();
                        jTextAreaPoints.setText(points.toString());

                    } else {
                        t.interrupt();
                    }
                }
            }.start();

            // Create listener to update problem species on GUI when new species added to list
            problemSpec.addPropertyChangeListener(new PropertyChangeListener() {
                @Override
                public void propertyChange(PropertyChangeEvent evt) {
                    System.out.println("evt: " + evt.getPropertyName());
                    if (evt.getPropertyName().equals("size")) {
                        jTextFieldProblemSpecies.setText(problemSpec.toString() + "...");
                    }
                    if (evt.getPropertyName().equals("finished")) {
                        jButtonAGenerateSubsetMinusPS.setEnabled(problemSpec.isFinished());
                        jButtonAUpdateProblemSpecies.setEnabled(problemSpec.isFinished());
                    }
                    
                }
            });

            // Create listener to update points on GUI when new points are added to list
            problemSpec.getPoints().addPropertyChangeListener(new PropertyChangeListener() {
                @Override
                public void propertyChange(PropertyChangeEvent evt) {
                    jTextAreaPoints.setText(problemSpec.getPoints().toString());
                    jLabelProcessCompletedTimeA.setText("Last Process Complete: " 
                            + toTimeString((System.nanoTime() - startTime) / 1000000000.0));
                }
            });
        } catch (ParseException | FileNotFoundException ex) {
            Logger.getLogger(SpecSelGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonProblemSpeciesActionPerformed

    private void jButtonCancelAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelAActionPerformed
        analyseCancelled = true;
        jButtonCancelA.setVisible(false);
    }//GEN-LAST:event_jButtonCancelAActionPerformed

    private void jButtonGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerateActionPerformed
        try {
            jLabelErrorProbs.setText("");
            //check file exists
            probabilitiesFileName = jTextFieldFilePathProb.getText();
            File file = new File(probabilitiesFileName);
            
            if(!validateFile(file, "Probabilities"))
            {
                return;//escapes here if file doesn't exist or is invalid format
            }

            // get other values from GUI
            int noSubsets = (int) jSpinnerNoSubsets.getValue();
            int subsetSize = (int) jSpinnerSubsetSize.getValue();
        
            SubSetGenerator pc = new SubSetGenerator();
            fileList = pc.generateSubsets(file, subsetSize, noSubsets, (int) jSpinnerMaxTime.getValue());
            resFileList = new FileList();
            jTextAreaSubsetFiles.setText(fileList.toString());
            jButtonRunSubsets.setEnabled(true);
            jButtonDeleteFiles.setEnabled(true);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(SpecSelGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonGenerateActionPerformed

    /**
     * Checks that a File exists in the file system and that its contents are 
     * valid for species selection
     * @param file
     * @param tabName
     * @return 
     */
    private boolean validateFile(File file, String tabName)
    {
        try {
            // check file exists
            if (!FileUtils.fileExists(file)) {
                ReadFile.infoBox("File " + file.getName() + " does not exist", tabName + " Error");
                return false;
            }
            // check file is of the correct format
            if(!ReadFile.fileIsValid(file))
            {
                //ReadFile.infoBox("File " + analyseFileName + " in not of valid format", tabName + " Error");
                return false;
            }
            return true;
        } catch (FileNotFoundException ex) {
            Logger.getLogger(SpecSelGUI.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
    }
    
    
    private void jButtonSelectDataFileProbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectDataFileProbActionPerformed
        selectDataFile(jTextFieldFilePathProb, jSpinnerSubsetSize);
    }//GEN-LAST:event_jButtonSelectDataFileProbActionPerformed

    private void jButtonRunSubsetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRunSubsetsActionPerformed
        jLabelErrorProbs.setText("");
        probabilitiesCancelled = false;
        jButtonRunSubsets.setEnabled(false);
        jButtonDeleteFiles.setEnabled(false);
        jButtonGenerate.setEnabled(false);
        jButtonCancelProb.setEnabled(true);
        List<SpeciesSelection> specSelList = new ArrayList<>();
        MutableBoolean errorOccurred = new MutableBoolean(false);
        ExecutorService executor = initialiseExecutorService();
        boolean truncate = jCheckBoxTruncateProbs.isSelected();
        SpecSelGUI thisGUI = this;

        new Thread() {
            @Override
            public void run() {
                try {
                    MutableBoolean running = new MutableBoolean(true);
                    timerLabel(running, jLabelProcessTimeProb);
                    int numberFiles = fileList.size();
                    int truncateThreshold = (int) jSpinnerTruncateThreshold.getValue();
                    jLabelFinishedThreads.setText(finishedThreads(0, numberFiles));
                    latch = new CountDownLatch(numberFiles);
                    for (File file : fileList) {
                        String fileName = file.getName();
                        // RUN THE FILES
                        if (!fileName.equals("")) {
                            //create runnable specSel object
                            SpeciesSelection specSel = new SpeciesSelection(fileName, !truncate, truncateThreshold, "A", 0, 0, 0);
                            // add the specSel to the list
                            specSelList.add(specSel);

                            // Create listener to listen for specSel finished or error
                            specSel.addPropertyChangeListener(new PropertyChangeListener() {
                                @Override
                                public void propertyChange(PropertyChangeEvent evt) {
                                    if (evt.getPropertyName().equals("errorOccurred")) {
                                        String error = "An error occurred - try larger subsets";
                                        jLabelErrorProbs.setText(error);
                                        errorOccurred.setTrue();
                                        // stop all jobs on executor
                                        cancelFutures();
                                    }
                                    if (evt.getPropertyName().equals("finished")) {
                                        latch.countDown();
                                        jLabelFinishedThreads.setText(finishedThreads(numberFiles - (int) latch.getCount(), numberFiles));
                                    }
                                }
                            });
                            // submit specSel to the executor queue to be run. Also add each job to a Futures list so that we can cancel the jobs if necessary
                            futures.add(executor.submit(specSel));

                        }
                    }
                    // add results files to fileList so we can delete them after use
                    for (SpeciesSelection specSel : specSelList) {
                        resFileList.add(new File(specSel.getResultsFileName()));
                    }
                    // watch for all threads to finish
                    latch.await();

                    running.setFalse();
                    System.out.println("Finished all threads");

                    // Calculate probabilities and save to file if not cancelled and no error
                    if (!probabilitiesCancelled && !errorOccurred.isTrue()) {
                        int noSubsets = (int) jSpinnerNoSubsets.getValue();
                        int subsetSize = (int) jSpinnerSubsetSize.getValue();
                        ProbabilityCalculator probsCalc = new ProbabilityCalculator(thisGUI, FileUtils.readFileToList(new File(probabilitiesFileName)), noSubsets, subsetSize);
                        boolean probsSaved = probsCalc.calcProbs(specSelList);
                        String subDatasetFilename = FileUtils.removeExt(probabilitiesFileName) + "_ProbsSet.txt";
                        if (probsSaved) {
                            probsCalc.generateSubDataset(subDatasetFilename);
                        }
                        String savedString = probsSaved ? "\n*** Output in " + probsCalc.getCurrentProbsFileName() + " ***\n" + "*** Sub DataSet in " + subDatasetFilename + " ***"
                                : "\n*** Save Cancelled ***";

                        jTextAreaSubsetFiles.setText(fileList.toString() + "\n" + resFileList.toString() + savedString);
                    } else {
                        jTextAreaSubsetFiles.setText(fileList.toString() + "\n*** Processing Cancelled ***");
                    }

                    jButtonDeleteFiles.setEnabled(true);
                    jButtonGenerate.setEnabled(true);
                    jButtonCancelProb.setEnabled(false);

                } catch (FileNotFoundException | InterruptedException ex) {
                    Logger.getLogger(SpecSelGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }.start();
    }//GEN-LAST:event_jButtonRunSubsetsActionPerformed

    private void jButtonDeleteFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteFilesActionPerformed
        jButtonDeleteFiles.setEnabled(false);
        jButtonRunSubsets.setEnabled(false);
        fileList.delete();
        resFileList.delete();
        jTextAreaSubsetFiles.setText("Files Deleted");
    }//GEN-LAST:event_jButtonDeleteFilesActionPerformed

    private void jButtonViewResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonViewResultsActionPerformed
        //Open probability output file in external program
        String str = ProbabilityCalculator.viewResults();
        if (!str.equals("")) {
            jTextAreaSubsetFiles.setText(str);
        }
    }//GEN-LAST:event_jButtonViewResultsActionPerformed

    private void jButtonDeleteFilesAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteFilesAActionPerformed
        jButtonDeleteFilesA.setVisible(false);
        if (null != problemSpec) {
            problemSpec.deleteFiles();
        }
        jTextAreaPoints.setText(jTextAreaPoints.getText() + "\n*** Files Deleted ***");
    }//GEN-LAST:event_jButtonDeleteFilesAActionPerformed

    private void jButtonCancelProbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelProbActionPerformed
        jButtonRunSubsets.setEnabled(true);
        probabilitiesCancelled = true;
        cancelFutures();
    }//GEN-LAST:event_jButtonCancelProbActionPerformed

    /**
     * Cancels all futures store in the list of futures
     * This cancels all of the jobs that were submitted to the ExecutorService
     */
    private void cancelFutures() {
        System.out.println("Futures: " + futures.size());
        for (Future future : futures) {
            future.cancel(true);
        }
        futures.clear();
        while (latch.getCount() > 0) {
            latch.countDown();
        }
    }

    private void jComboBoxOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxOptionActionPerformed

        String option = jComboBoxOption.getSelectedItem().toString();

        switch (option.charAt(0)) {
            case 'A':
                jSpinnerM.setValue(0);
                jSpinnerM.setEnabled(false);
                jSpinnerX.setValue(0.0);
                jSpinnerX.setEnabled(false);
                jSpinnerY.setValue(0.0);
                jSpinnerY.setEnabled(false);
                break;
            case 'B':
                jSpinnerM.setValue(0);
                jSpinnerM.setEnabled(true);
                jSpinnerX.setValue(0.0);
                jSpinnerX.setEnabled(true);
                jSpinnerY.setValue(0.0);
                jSpinnerY.setEnabled(false);
                break;
            case 'C':
                jSpinnerM.setValue(0);
                jSpinnerM.setEnabled(true);
                jSpinnerX.setValue(0.0);
                jSpinnerX.setEnabled(true);
                jSpinnerY.setValue(0.0);
                jSpinnerY.setEnabled(true);
                break;
        }
    }//GEN-LAST:event_jComboBoxOptionActionPerformed

    private void jButtonPViewResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPViewResultsActionPerformed
        try {
            FileUtils.openFile(SpeciesSelection.getResultsFileName(processFileName));
        } catch (Exception e) {
            String str = "Error attempting to open " + processFileName + ": " + e;
            System.err.println(str);
            ReadFile.infoBox(str, "View Results Error");
        }
    }//GEN-LAST:event_jButtonPViewResultsActionPerformed
    
    /**
     * Recalculates problem species based on margins from a prior run and the set exp divergence
     * @param evt 
     */
    private void jButtonAUpdateProblemSpeciesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAUpdateProblemSpeciesActionPerformed
        ArrayList<Integer> speciesNos = problemSpec.getPoints().getSpeciesByMargin(
                    (int)jSpinnerAllowableExpDivergencePct.getValue());
        jTextFieldProblemSpecies.setText(problemSpec.intsToString(speciesNos));
        jButtonAGenerateSubsetMinusPS.setEnabled(true);
        
    }//GEN-LAST:event_jButtonAUpdateProblemSpeciesActionPerformed

    /**
     * Generates a valid subset file from the input file, less identified problem species
     * This file can then be processed via the Process tab
     * @param evt 
     */
    private void jButtonAGenerateSubsetMinusPSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAGenerateSubsetMinusPSActionPerformed
        try 
        {
            jButtonAGenerateSubsetMinusPS.setEnabled(false);
            
            // get the problem species list from text field
            String text = jTextFieldProblemSpecies.getText().replaceAll(",", "");
            Scanner scanner = new Scanner(text);
            ArrayList<Integer> speciesNos = new ArrayList<>();
            while(scanner.hasNextInt())
            {
                speciesNos.add(scanner.nextInt());
            }

            SubSetGenerator ssGen = new SubSetGenerator();
            String subsetFileName = ssGen.createSubset(new File(analyseFileName), speciesNos);
            jTextAreaPoints.setText(jTextAreaPoints.getText() + "\nSubset File saved to " + subsetFileName);
        } 
        catch (FileNotFoundException ex) 
        {
            Logger.getLogger(SpecSelGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonAGenerateSubsetMinusPSActionPerformed

    /**
     * Disable Run Subsets if spinner button clicked to avoid change of value after subset generation
     * @param evt 
     */
    private void jSpinnerNoSubsetsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerNoSubsetsStateChanged
        jButtonRunSubsets.setEnabled(false);
    }//GEN-LAST:event_jSpinnerNoSubsetsStateChanged

    /**
     * Disable Run Subsets if spinner button clicked to avoid change of value after subset generation
     * @param evt 
     */
    private void jSpinnerSubsetSizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerSubsetSizeStateChanged
        jButtonRunSubsets.setEnabled(false);
    }//GEN-LAST:event_jSpinnerSubsetSizeStateChanged

    /**
     * Disable Run Subsets if key is typed in spinner to avoid change of value after subset generation
     */
    private void addJSpinnerNoSubsetsKeyTypedListener(){
        JTextField textField = (JTextField) jSpinnerNoSubsets.getEditor().getComponent(0);
        textField.addKeyListener(new KeyListener(){
            @Override
            public void keyPressed(KeyEvent e) {
            }
            @Override
            public void keyReleased(KeyEvent e) {
            }
            @Override
            public void keyTyped(KeyEvent e) { 
                jButtonRunSubsets.setEnabled(false);
            }
        });
    }
    
    /**
     * Disable Run Subsets if key is typed in spinner to avoid change of value after subset generation
     */
    private void addJSpinnerSubsetSizeKeyTypedListener(){
        JTextField textField = (JTextField) jSpinnerSubsetSize.getEditor().getComponent(0);
        textField.addKeyListener(new KeyListener(){
            @Override
            public void keyPressed(KeyEvent e) {
            }
            @Override
            public void keyReleased(KeyEvent e) {
            }
            @Override
            public void keyTyped(KeyEvent e) { 
                jButtonRunSubsets.setEnabled(false);
            }
        });
    }
    
    /**
     * returns a string describing how many of a total number of threads have completed
     * @param finished
     * @param total
     * @return 
     */
    private String finishedThreads(int finished, int total) {
        return "Finished: " + finished + " of " + total;
    }

    /**
     * Sets text of 'timeLabel' to display constantly updating processing time
     * until 'running' is set to false
     *
     * @param running
     * @param timeLabel
     */
    private void timerLabel(MutableBoolean running, JLabel timeLabel) {
        long startTime = System.nanoTime();
        new Thread() {
            @Override
            public void run() {
                while (running.isTrue()) {
                    double seconds = (System.nanoTime() - startTime) / 1000000000.0;
                    timeLabel.setText("Processing Time: " + toTimeString(seconds));
                    try {
                        Thread.sleep(91);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(SpecSelGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }.start();
    }

    /**
     * launches JChooser and returns path of file selected for load or save
     * @param option
     * @return 
     */
    public String getTextFilePath(String option) {
        // use JFileChooser to select album text file
        try {
            String filePath;
            // launch file chooser in current working directory
            JFileChooser fileChooser = new JFileChooser(workingDir);

            //lock file chooser to working directory
            final File dirToLock = new File(workingDir);
            fileChooser.setFileView(new FileView() {
                @Override
                public Boolean isTraversable(File f) {
                    return dirToLock.equals(f);
                }
            });

            // filter for text files
            FileFilter filter = new FileNameExtensionFilter("Text File", "txt");
            fileChooser.setFileFilter(filter);

            // initiate load or save dialog according to option parameter
            Component c1 = null;
            if (option.equals("LOAD")) {
                fileChooserResult = fileChooser.showOpenDialog(c1);
            } else if (option.equals("SAVE")) {
                // set custom header text
                fileChooser.setDialogTitle("Specify file name to Save probabilities");
                fileChooserResult = fileChooser.showSaveDialog(c1);
            }

            // get users selected file and directory location
            File file = fileChooser.getSelectedFile();
            if (file != null) {
                filePath = file.getAbsolutePath();
                workingDir = file.getParentFile().getAbsolutePath();
                return getFilenameFromPath(filePath);
            }
        } catch (Exception e) {
            System.err.println("Error in getTextFilePath(): " + e);
        }
        return null;
    }

    /**
     * Method to exact filename and extension from absolutepath as string
     * @param filePath
     * @return 
     */
    private String getFilenameFromPath(String filePath) {
        return Paths.get(filePath).getFileName().toString();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SpecSelGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SpecSelGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SpecSelGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SpecSelGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SpecSelGUI().setVisible(true);
            }
        });
    }
    
    /**
     * Gets the value of the selected radio button on the analyse tab to 
     * determine which results files have been requested to be output
     * @return 
     */
    private Options getOption() {
        if (jRadioButtonNone.isSelected()) {
            return Options.NONE;
        } else if (jRadioButtonAll.isSelected()) {
            return Options.ALL;
        } else if (jRadioButtonFinal.isSelected()) {
            return Options.FINAL;
        } else {
            System.err.println("No Output Option Selected");
            return null;
        }
    }

    /**
     * returns whether overwrite probabilities file checkbox is checked
     * @return 
     */
    public JCheckBox getCheckBoxOverwriteProbs() {
        return jCheckBoxOverwriteProbs;
    }

    /**
     * returns value indicating result of a file chooser action
     * @return 
     */
    public int getFileChooserResult() {
        return fileChooserResult;
    }

    /**
     * returns file name of file used to generate subsets on probabilities tab
     * @return 
     */
    public String getProbabilitiesFileName() {
        return probabilitiesFileName;
    }

    /**
     * returns value set in probabilities truncate threshold spinner
     * @return 
     */
    public int getTruncateThreshold() {
        return (int) jSpinnerTruncateThreshold.getValue();
    }

    /**
     * returns whether probabilities truncate checkbox is checked
     * @return 
     */
    public boolean getIsTruncated() {
        return jCheckBoxTruncateProbs.isSelected();
    }

    /**
     * returns value set in probabilities threshold spinner
     * @return 
     */
    public double getProbsThreshold() {
        return (double) jSpinnerProbsThreshold.getValue();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonAGenerateSubsetMinusPS;
    private javax.swing.JButton jButtonAUpdateProblemSpecies;
    private javax.swing.JButton jButtonCancelA;
    private javax.swing.JButton jButtonCancelP;
    private javax.swing.JButton jButtonCancelProb;
    private javax.swing.JButton jButtonDeleteFiles;
    private javax.swing.JButton jButtonDeleteFilesA;
    private javax.swing.JButton jButtonGenerate;
    private javax.swing.JButton jButtonPViewResults;
    private javax.swing.JButton jButtonProblemSpecies;
    private javax.swing.JButton jButtonProcess;
    private javax.swing.JButton jButtonRunSubsets;
    private javax.swing.JButton jButtonSelectDataFileA;
    private javax.swing.JButton jButtonSelectDataFileP;
    private javax.swing.JButton jButtonSelectDataFileProb;
    private javax.swing.JButton jButtonViewResults;
    private javax.swing.JCheckBox jCheckBoxOverwriteProbs;
    private javax.swing.JCheckBox jCheckBoxTruncate;
    private javax.swing.JCheckBox jCheckBoxTruncateProbs;
    private javax.swing.JComboBox<String> jComboBoxOption;
    private javax.swing.JEditorPane jEditorPaneAbout;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelAllowedDiv;
    private javax.swing.JLabel jLabelAreaPrecThresh;
    private javax.swing.JLabel jLabelErrorProbs;
    private javax.swing.JLabel jLabelFinishedThreads;
    private javax.swing.JLabel jLabelM;
    private javax.swing.JLabel jLabelMaxTime;
    private javax.swing.JLabel jLabelNoSpec;
    private javax.swing.JLabel jLabelNoSubsets;
    private javax.swing.JLabel jLabelOption;
    private javax.swing.JLabel jLabelProbSpec;
    private javax.swing.JLabel jLabelProcessCompletedTimeA;
    private javax.swing.JLabel jLabelProcessTime;
    private javax.swing.JLabel jLabelProcessTimeA;
    private javax.swing.JLabel jLabelProcessTimeProb;
    private javax.swing.JLabel jLabelSDThresh;
    private javax.swing.JLabel jLabelSecs;
    private javax.swing.JLabel jLabelSpecThresh;
    private javax.swing.JLabel jLabelSubsetSize;
    private javax.swing.JLabel jLabelX;
    private javax.swing.JLabel jLabelY;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelAbout;
    private javax.swing.JPanel jPanelAnalyse;
    private javax.swing.JPanel jPanelBottom;
    private javax.swing.JPanel jPanelLower;
    private javax.swing.JPanel jPanelProbUpper;
    private javax.swing.JPanel jPanelProbability;
    private javax.swing.JPanel jPanelProcess;
    private javax.swing.JPanel jPanelRadioButtons;
    private javax.swing.JPanel jPanelRight;
    private javax.swing.JPanel jPanelTop;
    private javax.swing.JPanel jPanelUpper;
    private javax.swing.JPanel jPanelWest;
    private javax.swing.JRadioButton jRadioButtonAll;
    private javax.swing.JRadioButton jRadioButtonFinal;
    private javax.swing.JRadioButton jRadioButtonNone;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPaneKey;
    private javax.swing.JScrollPane jScrollPanePoints;
    private javax.swing.JSpinner jSpinnerAllowableExpDivergencePct;
    private javax.swing.JSpinner jSpinnerInitialNoSpecies;
    private javax.swing.JSpinner jSpinnerM;
    private javax.swing.JSpinner jSpinnerMaxTime;
    private javax.swing.JSpinner jSpinnerNoSubsets;
    private javax.swing.JSpinner jSpinnerProbsThreshold;
    private javax.swing.JSpinner jSpinnerSubsetSize;
    private javax.swing.JSpinner jSpinnerTruncateThreshold;
    private javax.swing.JSpinner jSpinnerX;
    private javax.swing.JSpinner jSpinnerY;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextAreaKey;
    private javax.swing.JTextArea jTextAreaPoints;
    private javax.swing.JTextArea jTextAreaSubsetFiles;
    private javax.swing.JTextField jTextFieldDataFilePath;
    private javax.swing.JTextField jTextFieldDataFilePathA;
    private javax.swing.JTextField jTextFieldFilePathProb;
    private javax.swing.JTextField jTextFieldProblemSpecies;
    // End of variables declaration//GEN-END:variables
}
