package speciesselection.gui;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Dimension;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.nio.file.Paths;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileView;
import preprocessing.FileList;
import preprocessing.MutableBoolean;
import preprocessing.Options;
import preprocessing.PlotPoints;
import preprocessing.ProblemSpecies;
import preprocessing.ResultSet;
import preprocessing.SubSetGenerator;
import speciesselection.SpeciesSelection;

/**
 * GUI for Species Selection software
 *
 * @author mre16utu
 */
public class SpecSelGUI extends javax.swing.JFrame {

    // variable to get result of file open/save dialog
    private int fileChooserResult;
    private String workingDir, fileName;
    private volatile boolean cancelled, errorOccurred;

    // Global member variables 
    private List<Thread> threads;
    private FileList fileList, resFileList;
    private ProblemSpecies problemSpec;
    private static final String DEFAULT_PROBS_FILENAME = "probabilities.txt";
    private static String currentProbsFileName;
    private boolean subSetsCancelled;
    private int noSubsets, subsetSize;

    /**
     * Creates new form SpecSelGUI
     */
    public SpecSelGUI() {
        initComponents();
        currentProbsFileName = DEFAULT_PROBS_FILENAME;
        jButtonCancelP.setVisible(false);
        jButtonCancelA.setVisible(false);
        jButtonDeleteFilesA.setVisible(false);
        workingDir = System.getProperty("user.dir");
        initSpinners();
    }
    
    private void initSpinners()
    {
        try
        {
            // initialise max value of probabilities tab spinner for subset size based upon default filename
            String probsFilename = jTextFieldFilePathProb.getText();
            if(!probsFilename.equals(""))
            {
                File file = new File(probsFilename);
                if(fileExists(file))
                {
                    setNumberSpinnerMax(jSpinnerSubsetSize, noSpeciesInFile(probsFilename)-1);
                }
            }
            
            // initialise max value of analyse tab spinner for initial no species based upon default filename
            String analyseFilename = jTextFieldDataFilePathA.getText();
            if(!analyseFilename.equals(""))
            {
                File file = new File(analyseFilename);
                if(fileExists(file))
                {
                    setNumberSpinnerMax(jSpinnerInitialNoSpecies, noSpeciesInFile(analyseFilename)-1);
                }
            }
        }
        catch(FileNotFoundException e)
        {
            System.out.println("FileNotFoundException in SpecSelGUI.initSpinner()");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelProcess = new javax.swing.JPanel();
        jPanelTop = new javax.swing.JPanel();
        jButtonSelectDataFileP = new javax.swing.JButton();
        jTextFieldDataFilePath = new javax.swing.JTextField();
        jButtonProcess = new javax.swing.JButton();
        jCheckBoxTruncate = new javax.swing.JCheckBox();
        jButtonCancelP = new javax.swing.JButton();
        jPanelBottom = new javax.swing.JPanel();
        jLabelProcessTime = new javax.swing.JLabel();
        jPanelAnalyse = new javax.swing.JPanel();
        jPanelUpper = new javax.swing.JPanel();
        jButtonSelectDataFileA = new javax.swing.JButton();
        jTextFieldDataFilePathA = new javax.swing.JTextField();
        jLabelNoSpec = new javax.swing.JLabel();
        jSpinnerInitialNoSpecies = new javax.swing.JSpinner();
        jLabelAllowedDiv = new javax.swing.JLabel();
        jSpinnerAllowableExpDivergencePct = new javax.swing.JSpinner();
        jPanelRadioButtons = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jRadioButtonNone = new javax.swing.JRadioButton();
        jRadioButtonFinal = new javax.swing.JRadioButton();
        jRadioButtonAll = new javax.swing.JRadioButton();
        jButtonProblemSpecies = new javax.swing.JButton();
        jButtonCancelA = new javax.swing.JButton();
        jLabelProbSpec = new javax.swing.JLabel();
        jTextFieldProblemSpecies = new javax.swing.JTextField();
        jButtonDeleteFilesA = new javax.swing.JButton();
        jPanelLower = new javax.swing.JPanel();
        jScrollPanePoints = new javax.swing.JScrollPane();
        jTextAreaPoints = new javax.swing.JTextArea();
        jScrollPaneKey = new javax.swing.JScrollPane();
        jTextAreaKey = new javax.swing.JTextArea();
        jLabelProcessCompletedTimeA = new javax.swing.JLabel();
        jLabelProcessTimeA = new javax.swing.JLabel();
        jPanelProbability = new javax.swing.JPanel();
        jPanelProbUpper = new javax.swing.JPanel();
        jButtonSelectDataFileProb = new javax.swing.JButton();
        jTextFieldFilePathProb = new javax.swing.JTextField();
        jLabelNoSubsets = new javax.swing.JLabel();
        jSpinnerNoSubsets = new javax.swing.JSpinner();
        jLabelSubsetSize = new javax.swing.JLabel();
        jSpinnerSubsetSize = new javax.swing.JSpinner();
        jButtonGenerate = new javax.swing.JButton();
        jCheckBoxTruncateProbs = new javax.swing.JCheckBox();
        jPanelProbLower = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaSubsetFiles = new javax.swing.JTextArea();
        jButtonRunSubsets = new javax.swing.JButton();
        jLabelFinishedThreads = new javax.swing.JLabel();
        jLabelProcessTimeProb = new javax.swing.JLabel();
        jButtonDeleteFiles = new javax.swing.JButton();
        jButtonViewResults = new javax.swing.JButton();
        jButtonCancelProb = new javax.swing.JButton();
        jLabelErrorProbs = new javax.swing.JLabel();
        jCheckBoxOverwriteProbs = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Species Selection ");
        setResizable(false);

        jPanelProcess.setPreferredSize(new java.awt.Dimension(600, 400));
        jPanelProcess.setLayout(new java.awt.BorderLayout());

        jPanelTop.setPreferredSize(new java.awt.Dimension(782, 60));

        jButtonSelectDataFileP.setText("Select Data File");
        jButtonSelectDataFileP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectDataFilePActionPerformed(evt);
            }
        });

        jTextFieldDataFilePath.setText("Forest_D_ALL.txt");

        jButtonProcess.setText("Process");
        jButtonProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonProcessActionPerformed(evt);
            }
        });

        jCheckBoxTruncate.setSelected(true);
        jCheckBoxTruncate.setText("Truncate Results");

        jButtonCancelP.setText("Cancel");
        jButtonCancelP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelTopLayout = new javax.swing.GroupLayout(jPanelTop);
        jPanelTop.setLayout(jPanelTopLayout);
        jPanelTopLayout.setHorizontalGroup(
            jPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelTopLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonSelectDataFileP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldDataFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxTruncate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(jPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonCancelP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonProcess, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelTopLayout.setVerticalGroup(
            jPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelTopLayout.createSequentialGroup()
                .addGroup(jPanelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSelectDataFileP)
                    .addComponent(jTextFieldDataFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonProcess)
                    .addComponent(jCheckBoxTruncate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCancelP)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelProcess.add(jPanelTop, java.awt.BorderLayout.PAGE_START);

        jPanelBottom.setMinimumSize(new java.awt.Dimension(100, 30));
        jPanelBottom.setPreferredSize(new java.awt.Dimension(782, 30));

        jLabelProcessTime.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        javax.swing.GroupLayout jPanelBottomLayout = new javax.swing.GroupLayout(jPanelBottom);
        jPanelBottom.setLayout(jPanelBottomLayout);
        jPanelBottomLayout.setHorizontalGroup(
            jPanelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelBottomLayout.createSequentialGroup()
                .addGap(0, 628, Short.MAX_VALUE)
                .addComponent(jLabelProcessTime, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanelBottomLayout.setVerticalGroup(
            jPanelBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelProcessTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
        );

        jPanelProcess.add(jPanelBottom, java.awt.BorderLayout.PAGE_END);

        jTabbedPane1.addTab("Process", jPanelProcess);

        jButtonSelectDataFileA.setText("Select Data File");
        jButtonSelectDataFileA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectDataFileAActionPerformed(evt);
            }
        });

        jTextFieldDataFilePathA.setText("Forest1.txt");

        jLabelNoSpec.setText("Initial No of Species:");

        jSpinnerInitialNoSpecies.setModel(new javax.swing.SpinnerNumberModel(50, 14, null, 1));

        jLabelAllowedDiv.setText("Allowable % Exp divergence:");

        jSpinnerAllowableExpDivergencePct.setModel(new javax.swing.SpinnerNumberModel(1, 1, 100, 1));

        jPanelRadioButtons.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        jLabel4.setText("Output for:");

        buttonGroup1.add(jRadioButtonNone);
        jRadioButtonNone.setText("None");

        buttonGroup1.add(jRadioButtonFinal);
        jRadioButtonFinal.setSelected(true);
        jRadioButtonFinal.setText("Final");

        buttonGroup1.add(jRadioButtonAll);
        jRadioButtonAll.setText("All");

        javax.swing.GroupLayout jPanelRadioButtonsLayout = new javax.swing.GroupLayout(jPanelRadioButtons);
        jPanelRadioButtons.setLayout(jPanelRadioButtonsLayout);
        jPanelRadioButtonsLayout.setHorizontalGroup(
            jPanelRadioButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelRadioButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelRadioButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                    .addGroup(jPanelRadioButtonsLayout.createSequentialGroup()
                        .addGroup(jPanelRadioButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonFinal)
                            .addComponent(jRadioButtonAll)
                            .addComponent(jRadioButtonNone))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanelRadioButtonsLayout.setVerticalGroup(
            jPanelRadioButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelRadioButtonsLayout.createSequentialGroup()
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButtonNone)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonFinal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonAll))
        );

        jButtonProblemSpecies.setText("Find Problem Species");
        jButtonProblemSpecies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonProblemSpeciesActionPerformed(evt);
            }
        });

        jButtonCancelA.setText("Cancel");
        jButtonCancelA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelAActionPerformed(evt);
            }
        });

        jLabelProbSpec.setText("Problem Species:");
        jLabelProbSpec.setMaximumSize(new java.awt.Dimension(107, 14));
        jLabelProbSpec.setMinimumSize(new java.awt.Dimension(107, 14));
        jLabelProbSpec.setPreferredSize(new java.awt.Dimension(107, 14));

        jTextFieldProblemSpecies.setText("results");

        jButtonDeleteFilesA.setText("Delete Files");
        jButtonDeleteFilesA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteFilesAActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelUpperLayout = new javax.swing.GroupLayout(jPanelUpper);
        jPanelUpper.setLayout(jPanelUpperLayout);
        jPanelUpperLayout.setHorizontalGroup(
            jPanelUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUpperLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonSelectDataFileA)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldDataFilePathA, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanelRadioButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonCancelA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonProblemSpecies, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                    .addComponent(jButtonDeleteFilesA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanelUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelUpperLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanelUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanelUpperLayout.createSequentialGroup()
                            .addGroup(jPanelUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabelAllowedDiv, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabelNoSpec, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanelUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jSpinnerInitialNoSpecies, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jSpinnerAllowableExpDivergencePct, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(jPanelUpperLayout.createSequentialGroup()
                            .addComponent(jLabelProbSpec, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextFieldProblemSpecies, javax.swing.GroupLayout.PREFERRED_SIZE, 672, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap()))
        );
        jPanelUpperLayout.setVerticalGroup(
            jPanelUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUpperLayout.createSequentialGroup()
                .addGroup(jPanelUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonSelectDataFileA)
                        .addComponent(jTextFieldDataFilePathA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanelRadioButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelUpperLayout.createSequentialGroup()
                        .addComponent(jButtonProblemSpecies)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCancelA)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDeleteFilesA)))
                .addGap(0, 46, Short.MAX_VALUE))
            .addGroup(jPanelUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelUpperLayout.createSequentialGroup()
                    .addGap(46, 46, 46)
                    .addGroup(jPanelUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelNoSpec)
                        .addComponent(jSpinnerInitialNoSpecies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanelUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelAllowedDiv)
                        .addComponent(jSpinnerAllowableExpDivergencePct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(15, 15, 15)
                    .addGroup(jPanelUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelProbSpec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldProblemSpecies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jTextAreaPoints.setColumns(20);
        jTextAreaPoints.setRows(5);
        jScrollPanePoints.setViewportView(jTextAreaPoints);

        jTextAreaKey.setEditable(false);
        jTextAreaKey.setBackground(new java.awt.Color(240, 240, 240));
        jTextAreaKey.setColumns(20);
        jTextAreaKey.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jTextAreaKey.setRows(5);
        jTextAreaKey.setText("Key:\nX        - Number of species in DataFile\nY        - MinSpecSetFamily (MSSF) size\nMargin   - Y / predicted Y (Exponential Curve fitting)\nDataFile - name of subset file processed\nTime     - HH:MM:SS.ss time taken to generate MSSF");
        jScrollPaneKey.setViewportView(jTextAreaKey);

        jLabelProcessCompletedTimeA.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        jLabelProcessTimeA.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelProcessTimeA.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        javax.swing.GroupLayout jPanelLowerLayout = new javax.swing.GroupLayout(jPanelLower);
        jPanelLower.setLayout(jPanelLowerLayout);
        jPanelLowerLayout.setHorizontalGroup(
            jPanelLowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanelLowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelLowerLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPanePoints, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanelLowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPaneKey, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLowerLayout.createSequentialGroup()
                            .addGap(0, 174, Short.MAX_VALUE)
                            .addGroup(jPanelLowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabelProcessTimeA, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelProcessCompletedTimeA, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addContainerGap()))
        );
        jPanelLowerLayout.setVerticalGroup(
            jPanelLowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 321, Short.MAX_VALUE)
            .addGroup(jPanelLowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelLowerLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanelLowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPanePoints, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                        .addGroup(jPanelLowerLayout.createSequentialGroup()
                            .addComponent(jScrollPaneKey, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE)
                            .addComponent(jLabelProcessCompletedTimeA, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabelProcessTimeA, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap()))))
        );

        javax.swing.GroupLayout jPanelAnalyseLayout = new javax.swing.GroupLayout(jPanelAnalyse);
        jPanelAnalyse.setLayout(jPanelAnalyseLayout);
        jPanelAnalyseLayout.setHorizontalGroup(
            jPanelAnalyseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAnalyseLayout.createSequentialGroup()
                .addGroup(jPanelAnalyseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelLower, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelUpper, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelAnalyseLayout.setVerticalGroup(
            jPanelAnalyseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAnalyseLayout.createSequentialGroup()
                .addComponent(jPanelUpper, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelLower, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(134, 134, 134))
        );

        jTabbedPane1.addTab("Analyse", jPanelAnalyse);

        jButtonSelectDataFileProb.setText("Select Data File");
        jButtonSelectDataFileProb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectDataFileProbActionPerformed(evt);
            }
        });

        jTextFieldFilePathProb.setText("Forest1.txt");

        jLabelNoSubsets.setText("No. Subsets:");

        jSpinnerNoSubsets.setModel(new javax.swing.SpinnerNumberModel(10, 1, null, 1));

        jLabelSubsetSize.setText("Subset Size:");

        jSpinnerSubsetSize.setModel(new javax.swing.SpinnerNumberModel(30, 12, null, 1));

        jButtonGenerate.setText("Generate Subsets");
        jButtonGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerateActionPerformed(evt);
            }
        });

        jCheckBoxTruncateProbs.setSelected(true);
        jCheckBoxTruncateProbs.setText("Truncate Results");

        javax.swing.GroupLayout jPanelProbUpperLayout = new javax.swing.GroupLayout(jPanelProbUpper);
        jPanelProbUpper.setLayout(jPanelProbUpperLayout);
        jPanelProbUpperLayout.setHorizontalGroup(
            jPanelProbUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelProbUpperLayout.createSequentialGroup()
                .addGroup(jPanelProbUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelProbUpperLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jButtonSelectDataFileProb)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldFilePathProb, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelProbUpperLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelProbUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanelProbUpperLayout.createSequentialGroup()
                                .addComponent(jLabelSubsetSize, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSpinnerSubsetSize, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelProbUpperLayout.createSequentialGroup()
                                .addComponent(jLabelNoSubsets, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSpinnerNoSubsets, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE)
                .addGroup(jPanelProbUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jCheckBoxTruncateProbs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonGenerate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelProbUpperLayout.setVerticalGroup(
            jPanelProbUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelProbUpperLayout.createSequentialGroup()
                .addGroup(jPanelProbUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSelectDataFileProb)
                    .addComponent(jTextFieldFilePathProb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonGenerate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelProbUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNoSubsets)
                    .addComponent(jSpinnerNoSubsets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxTruncateProbs))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelProbUpperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelSubsetSize)
                    .addComponent(jSpinnerSubsetSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41))
        );

        jTextAreaSubsetFiles.setColumns(20);
        jTextAreaSubsetFiles.setRows(5);
        jScrollPane1.setViewportView(jTextAreaSubsetFiles);

        jButtonRunSubsets.setText("Run Subsets");
        jButtonRunSubsets.setEnabled(false);
        jButtonRunSubsets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRunSubsetsActionPerformed(evt);
            }
        });

        jLabelProcessTimeProb.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jButtonDeleteFiles.setText("Delete Files");
        jButtonDeleteFiles.setEnabled(false);
        jButtonDeleteFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteFilesActionPerformed(evt);
            }
        });

        jButtonViewResults.setText("View Results");
        jButtonViewResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonViewResultsActionPerformed(evt);
            }
        });

        jButtonCancelProb.setText("Cancel");
        jButtonCancelProb.setEnabled(false);
        jButtonCancelProb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelProbActionPerformed(evt);
            }
        });

        jLabelErrorProbs.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabelErrorProbs.setForeground(new java.awt.Color(204, 0, 0));

        jCheckBoxOverwriteProbs.setSelected(true);
        jCheckBoxOverwriteProbs.setText("Overwrite probabilities.txt?");
        jCheckBoxOverwriteProbs.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);

        javax.swing.GroupLayout jPanelProbLowerLayout = new javax.swing.GroupLayout(jPanelProbLower);
        jPanelProbLower.setLayout(jPanelProbLowerLayout);
        jPanelProbLowerLayout.setHorizontalGroup(
            jPanelProbLowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelProbLowerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelProbLowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelProbLowerLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanelProbLowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelProcessTimeProb, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                            .addComponent(jLabelFinishedThreads, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanelProbLowerLayout.createSequentialGroup()
                        .addComponent(jCheckBoxOverwriteProbs, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addGroup(jPanelProbLowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonDeleteFiles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonViewResults, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonCancelProb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanelProbLowerLayout.createSequentialGroup()
                                .addComponent(jButtonRunSubsets, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(jLabelErrorProbs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(2355, 2355, 2355))
        );
        jPanelProbLowerLayout.setVerticalGroup(
            jPanelProbLowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelProbLowerLayout.createSequentialGroup()
                .addGroup(jPanelProbLowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelProbLowerLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelProbLowerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonRunSubsets)
                            .addComponent(jCheckBoxOverwriteProbs))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonCancelProb)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDeleteFiles)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonViewResults)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 153, Short.MAX_VALUE)
                        .addComponent(jLabelErrorProbs, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelFinishedThreads, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelProcessTimeProb, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanelProbabilityLayout = new javax.swing.GroupLayout(jPanelProbability);
        jPanelProbability.setLayout(jPanelProbabilityLayout);
        jPanelProbabilityLayout.setHorizontalGroup(
            jPanelProbabilityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelProbUpper, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanelProbLower, javax.swing.GroupLayout.PREFERRED_SIZE, 809, Short.MAX_VALUE)
        );
        jPanelProbabilityLayout.setVerticalGroup(
            jPanelProbabilityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelProbabilityLayout.createSequentialGroup()
                .addComponent(jPanelProbUpper, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelProbLower, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Probability", jPanelProbability);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 814, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonProcessActionPerformed
        try {
            jButtonProcess.setEnabled(false);
            String fileName = jTextFieldDataFilePath.getText();
            if (!fileName.equals("")) {
                // Clear any existing plot
                BorderLayout layout = (BorderLayout) jPanelProcess.getLayout();
                Component center = layout.getLayoutComponent(BorderLayout.CENTER);
                if (center != null) {
                    jPanelProcess.remove(center);
                    jPanelProcess.repaint();
                }

                //Check for results truncation
                boolean truncate = !jCheckBoxTruncate.isSelected();

                String[] args = {fileName};
                //run solution and draw graph
                SpeciesSelection specSel = new SpeciesSelection(args, truncate);
                Thread t = new Thread(specSel);
                t.start();
                timeProcess(specSel, t);

            } else {
                System.out.println("No file selected");
            }
        } catch (Exception e) {
            System.out.println("Error Processing Data: " + e);
        }
        System.out.println("Process Complete");
    }//GEN-LAST:event_jButtonProcessActionPerformed

    private void timeProcess(SpeciesSelection specSel, Thread t) {
        cancelled = false;
        jButtonCancelP.setVisible(true);
        long startTime = System.nanoTime();
        new Thread() {
            @Override
            public void run() {
                while (!specSel.isFinished() && !cancelled) {
                    double seconds = (System.nanoTime() - startTime) / 1000000000.0;
                    jLabelProcessTime.setText("Processing Time: " + toTimeString(seconds));
                    try {
                        Thread.sleep(91);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(SpecSelGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                jButtonCancelP.setVisible(false);
                jButtonProcess.setEnabled(true);
                // If processing finished then display result graph, else the 
                // process was cancelled so stop the processing thread.
                if (specSel.isFinished()) {
                    ArrayList<Double> result = specSel.getResult();
                    drawGraph(result);
                } else {
                    t.interrupt();
                }
            }
        }.start();
    }

    private String toTimeString(double seconds) {
        int hours = (int) seconds / 3600;
        int minutes = ((int) seconds % 3600) / 60;
        seconds = seconds % 60;
        DecimalFormat df1 = new DecimalFormat("00");
        DecimalFormat df2 = new DecimalFormat("00.00");
        String time = df1.format(hours) + ":"
                + df1.format(minutes) + ":"
                + df2.format(seconds);
        return time;
    }

    private void drawGraph(ArrayList<Double> meanSensitivities) {
        // Draw the graph to GUI
        JPanel panel = jPanelProcess;
        Dimension dim = new Dimension(600, 400);
        GraphPanel graph = new GraphPanel(meanSensitivities, "SpecSet Size", "Minimum Mean Sensitivity");
        graph.setPreferredSize(dim);
        panel.add(graph, BorderLayout.CENTER);
        pack();
        panel.setVisible(true);
    }

    private void jButtonSelectDataFilePActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectDataFilePActionPerformed
        selectDataFile(jTextFieldDataFilePath, null);
    }//GEN-LAST:event_jButtonSelectDataFilePActionPerformed

    private void selectDataFile(JTextField textField, JSpinner spinner) {
        try {
            System.out.println("Loading data file");

            // prompt user to select text file containing album data
            String filename = getTextFilePath("LOAD");
            // proceed if file selected (not cancelled)
            if (fileChooserResult == JFileChooser.APPROVE_OPTION) {
                textField.setText(filename);
                if(null != spinner)
                {
                    setNumberSpinnerMax(spinner, noSpeciesInFile(filename)-1);
                }
            }
        } catch (FileNotFoundException e) {
            System.out.println("Error Loading");
        }
    }
    
    private int noSpeciesInFile(String fileName) throws FileNotFoundException
    {
        List<String> list = ProblemSpecies.readFileToList(new File(fileName));
        return list.size()-1;
    }
    
    private void setNumberSpinnerMax(JSpinner spinner, int value)
    {
        SpinnerNumberModel model = (SpinnerNumberModel)spinner.getModel();
        int min = (int)model.getMinimum();
        int currentValue = (int)spinner.getValue();
        value = Math.max(0,value);// ensure value not negative
        
        if(min > value)
        {
            model.setMinimum(value);
        }
        if(currentValue > value)
        {
            model.setValue(value);
        }
        model.setMaximum(value);
    }
    

    private void jButtonCancelPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelPActionPerformed
        cancelled = true;
        jButtonCancelP.setVisible(false);
    }//GEN-LAST:event_jButtonCancelPActionPerformed

    private void jButtonSelectDataFileAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectDataFileAActionPerformed
        selectDataFile(jTextFieldDataFilePathA, jSpinnerInitialNoSpecies);
    }//GEN-LAST:event_jButtonSelectDataFileAActionPerformed

    private void jButtonProblemSpeciesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonProblemSpeciesActionPerformed
        // Disable the process button so that it cannot be clicked twice
        jButtonProblemSpecies.setEnabled(false);
        // Clear text fields
        jLabelProcessCompletedTimeA.setText("");
        jTextAreaPoints.setText("");
        
        String fileName = jTextFieldDataFilePathA.getText();
        if (!fileName.equals("")) {
            try {
                jTextFieldProblemSpecies.setText("...");
                File file = new File(fileName);
                jSpinnerInitialNoSpecies.commitEdit();
                int initialNoSpecies = (Integer) jSpinnerInitialNoSpecies.getValue();
                jSpinnerAllowableExpDivergencePct.commitEdit();
                int expMarginPct = (Integer) jSpinnerAllowableExpDivergencePct.getValue();
                problemSpec = new ProblemSpecies(file, initialNoSpecies, expMarginPct, getOption());

                Thread t = new Thread(problemSpec);
                t.start();
                long startTime = System.nanoTime();
                cancelled = false;
                jButtonCancelA.setVisible(true);

                new Thread() {
                    @Override
                    public void run() {
                        double seconds;
                        while (!problemSpec.isFinished() && !cancelled) {
                            try {
                                seconds = (System.nanoTime() - startTime) / 1000000000.0;
                                jLabelProcessTimeA.setText("Processing Time: " + toTimeString(seconds));
                                Thread.sleep(91);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(SpecSelGUI.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                        // print results to GUI
                        jTextFieldProblemSpecies.setText(problemSpec.toString());

                        jButtonCancelA.setVisible(false);
                        jButtonDeleteFilesA.setVisible(true);
                        jButtonProblemSpecies.setEnabled(true);
                        // If processing finished then display results, else the process was cancelled so interrupt the processing thread.
                        if (problemSpec.isFinished()) {
                            PlotPoints points = problemSpec.getPoints();
                            jTextAreaPoints.setText(points.toString());
                            
                        } else {
                            t.interrupt();
                        }
                    }
                }.start();

                // Create listener to update problem species on GUI when new species added to list
                problemSpec.addPropertyChangeListener(new PropertyChangeListener() {
                    @Override
                    public void propertyChange(PropertyChangeEvent evt) {
                        jTextFieldProblemSpecies.setText(problemSpec.toString() + "...");
                    }
                });

                // Create listener to update points on GUI when new points are added to list
                problemSpec.getPoints().addPropertyChangeListener(new PropertyChangeListener() {
                    @Override
                    public void propertyChange(PropertyChangeEvent evt) {
                        jTextAreaPoints.setText(problemSpec.getPoints().toString());
                        jLabelProcessCompletedTimeA.setText("Last Process Complete: " + toTimeString((System.nanoTime() - startTime) / 1000000000.0));
                    }
                });

            } catch (ParseException | FileNotFoundException ex) {
                Logger.getLogger(SpecSelGUI.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_jButtonProblemSpeciesActionPerformed

    private void jButtonCancelAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelAActionPerformed
        cancelled = true;
        jButtonCancelA.setVisible(false);
    }//GEN-LAST:event_jButtonCancelAActionPerformed

    private void jButtonGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerateActionPerformed
        jLabelErrorProbs.setText("");
        fileName = jTextFieldFilePathProb.getText();
        noSubsets = (int)jSpinnerNoSubsets.getValue();
        subsetSize = (int)jSpinnerSubsetSize.getValue();
        
        if (!fileName.equals("")) {
            try {
                File file = new File(fileName);
                SubSetGenerator pc = new SubSetGenerator();
                fileList = pc.generateSubsets(file, subsetSize, noSubsets);
                resFileList = new FileList();
                jTextAreaSubsetFiles.setText(fileList.toString());
                jButtonRunSubsets.setEnabled(true);
                jButtonDeleteFiles.setEnabled(true);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(SpecSelGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtonGenerateActionPerformed
    
    private void jButtonSelectDataFileProbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectDataFileProbActionPerformed
        selectDataFile(jTextFieldFilePathProb, jSpinnerSubsetSize);
    }//GEN-LAST:event_jButtonSelectDataFileProbActionPerformed

    private void jButtonRunSubsetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRunSubsetsActionPerformed
        jLabelErrorProbs.setText("");
        subSetsCancelled = false;
        jButtonRunSubsets.setEnabled(false);
        jButtonDeleteFiles.setEnabled(false);
        jButtonGenerate.setEnabled(false);
        jButtonCancelProb.setEnabled(true);
        List<SpeciesSelection> specSelList = new ArrayList<>();
        errorOccurred = false;
        threads = new ArrayList<>();
        
        // get number of available cores, then run the processes in a threadpool 
        // executor with one process per core. Leave one core available for GUI 
        // main thread and ensure at least 1 process in the executor
        int cores = Math.max(1, Runtime.getRuntime().availableProcessors() - 1);
//        System.err.println("Number Cores: " + cores);
        ExecutorService executor = Executors.newFixedThreadPool(cores);
        boolean truncate = jCheckBoxTruncateProbs.isSelected();
        
        new Thread() {
            @Override
            public void run() {
                try {
                    MutableBoolean running = new MutableBoolean(true);
                    
                    timerLabel(running, jLabelProcessTimeProb);
                    int numberFiles = fileList.size();
                    jLabelFinishedThreads.setText(finishedThreads(0, numberFiles));
                    CountDownLatch latch = new CountDownLatch(numberFiles);
                    for (File file : fileList) {
                        String fileName = file.getName();
                        // RUN THE FILES
                        if (!fileName.equals("")) {
                            String[] args = {fileName};
                            //create runnable specSel object
                            SpeciesSelection specSel = new SpeciesSelection(args, !truncate);
                            // add the specSel to the list
                            specSelList.add(specSel);
                            
                            // Create listener to listen for specSel finished or error
                            specSel.addPropertyChangeListener(new PropertyChangeListener() {
                                @Override
                                public void propertyChange(PropertyChangeEvent evt) {
//                                    System.out.println("evt: " + evt.getPropertyName());
                                    
                                    if(evt.getPropertyName().equals("errorOccurred")){
                                        jLabelErrorProbs.setText("An error occurred - try larger subsets");
                                        errorOccurred = true;
                                    }
                                    
                                    if(evt.getPropertyName().equals("finished")){
                                        latch.countDown();
                                        jLabelFinishedThreads.setText(finishedThreads(numberFiles-(int)latch.getCount(), numberFiles));
                                    }
                                }
                            });
                            // submit specSel to the executor queue to be run
                            executor.submit(specSel);
//                            Thread t = new Thread(specSel);
//                            threads.add(t);
//                            t.start();
                        }
                    }
                    // add results files to fileList so we can delete them after use
                    for(SpeciesSelection specSel : specSelList)
                    {
                        resFileList.add(new File(specSel.getResultsFileName()));
                    }
                    // watch for all threads to finish
                    latch.await();
                    
                    running.setFalse();
                    System.out.println("Finished all threads");
                    
                    // Calculate probabilities and save to file
                    if(!subSetsCancelled && !errorOccurred)
                    {
                        boolean probsSaved = calcProbs(specSelList);
                        String savedString = probsSaved ? "\n*** Output in " + currentProbsFileName + " ***" : "\n*** Save Cancelled ***";
                        
                        jTextAreaSubsetFiles.setText(fileList.toString() + "\n" + resFileList.toString() + savedString);
                    }
                    else
                    {
                        jTextAreaSubsetFiles.setText(fileList.toString() + "\n*** Processing Cancelled ***");
                    }
                    
                    jButtonDeleteFiles.setEnabled(true);
                    jButtonGenerate.setEnabled(true);
                    jButtonCancelProb.setEnabled(false);
                    
                } catch (FileNotFoundException | InterruptedException ex) {
                    Logger.getLogger(SpecSelGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }.start();
    }//GEN-LAST:event_jButtonRunSubsetsActionPerformed

    private void jButtonDeleteFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteFilesActionPerformed
        jButtonDeleteFiles.setEnabled(false);
        jButtonRunSubsets.setEnabled(false);
        fileList.delete();
        resFileList.delete();
        jTextAreaSubsetFiles.setText("Files Deleted");
    }//GEN-LAST:event_jButtonDeleteFilesActionPerformed
   
    private void jButtonViewResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonViewResultsActionPerformed
        //Open probability output file in external program
        try
        {
            File f = new File(currentProbsFileName);
            if(f.exists() && !f.isDirectory()) { 
                if (Desktop.isDesktopSupported()) {
                Desktop.getDesktop().edit(f);
                } else {
                    String str = "This PC does not support file edit";
                    jTextAreaSubsetFiles.setText(str);
                    System.out.println(str);
                }
            }
            else
            {
                String str = "File does not exist";
                jTextAreaSubsetFiles.setText(str);
                System.out.println(str);
            }
        }
        catch(IOException e)
        {
            String str = "Error attempting to open " + currentProbsFileName + ": " + e;
            jTextAreaSubsetFiles.setText(str);
            System.out.println(str);
        }
    }//GEN-LAST:event_jButtonViewResultsActionPerformed

    private void jButtonDeleteFilesAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteFilesAActionPerformed
        jButtonDeleteFilesA.setVisible(false);
        if(null != problemSpec)
        {
            problemSpec.deleteFiles();
        }
    }//GEN-LAST:event_jButtonDeleteFilesAActionPerformed

    private void jButtonCancelProbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelProbActionPerformed
        jButtonRunSubsets.setEnabled(true);
        subSetsCancelled = true;
        System.out.println("Threads: " + threads.size());
        for(Thread t : threads)
        {
            t.interrupt();
        }
    }//GEN-LAST:event_jButtonCancelProbActionPerformed

    
    /**
     * Calculates the probability that a species will appear in an optimal 
     * solution, for each solution set size, when that species is included in the subset 
     * @param specSelList
     * @throws FileNotFoundException 
     */
    private boolean calcProbs(List<SpeciesSelection> specSelList) throws FileNotFoundException
    {
        //      setSize          speciesID, count
        HashMap<Integer, HashMap<Integer, Integer>> optimalOccurence = new HashMap<>();
        // optimalOccurence is used to keep count of number of times each species 
        // was included in optimal solution for each set size
        
        //      setSize          speciesID, count
        HashMap<Integer, HashMap<Integer, Integer>> speciesSetSizeUsage = new HashMap<>();
        // speciesSetSizeUsage is used such that for each species and each solution 
        // set size, we keep count of number of times the species was included in 
        // a subset when a solution was found for the set size
        
        
        for(SpeciesSelection specSel : specSelList)
        {
            List<Integer> iDs = specSel.speciesIDs();
            List<ResultSet> results = specSel.readResultsFile();
            
            // Keep count of number of times each species was included in optimal solution for each set size
            for(ResultSet resultSet : results)
            {
                int setSize = resultSet.getSetSize();
                //get optimal occurrance map for given set size
                HashMap<Integer, Integer> tempMap;
                if(optimalOccurence.containsKey(setSize))
                {
                    tempMap = optimalOccurence.get(setSize);
                }
                else
                {
                    tempMap = new HashMap<>();
                    optimalOccurence.put(setSize, tempMap);
                }
                
                // get the set of species that existed in optimal solutions 
                Set<Integer> intSet = resultSet.getSetInts();
                for(Integer speciesID : intSet)
                {
                    if(!tempMap.containsKey(speciesID))
                    {
                        tempMap.put(speciesID, 1);
                    }
                    else
                    {
                        tempMap.put(speciesID, tempMap.get(speciesID) + 1);
                    }
                }
                
                
                // For each species and each solution set size, keep count of number
                // of times the species was included in a subset and a solution was 
                // found for the set size
                if(!resultSet.isEmpty()) // only count the species usage if a result was found for the set size
                {
                    //get optimal occurrance map for given set size
                    HashMap<Integer, Integer> tempMap2;
                    if(speciesSetSizeUsage.containsKey(setSize))
                    {
                        tempMap2 = speciesSetSizeUsage.get(setSize);
                    }
                    else
                    {
                        tempMap2 = new HashMap<>();
                        speciesSetSizeUsage.put(setSize, tempMap2);
                    }

                    // get the set of species that existed dataset 
                    for(Integer speciesID : iDs)
                    {
                        if(!tempMap2.containsKey(speciesID))
                        {
                            tempMap2.put(speciesID, 1);
                        }
                        else
                        {
                            tempMap2.put(speciesID, tempMap2.get(speciesID) + 1);
                        }
                    }
                }
            }
        }
        
        // calculate the probabilities for each species in each set size and
        // Check if probabilities results file all ready exists
        File file = new File(currentProbsFileName);
        if(!jCheckBoxOverwriteProbs.isSelected() && fileExists(file))
        {
            String newFileName = getTextFilePath("SAVE");
            // ensure file ends with .txt
            String suffix = ".txt";
            if(!newFileName.endsWith(suffix))
            {
                newFileName += suffix;
            }
            
            if (fileChooserResult == JFileChooser.APPROVE_OPTION) {
                currentProbsFileName = newFileName;
                file = new File(currentProbsFileName);
                jCheckBoxOverwriteProbs.setText("Overwrite " + currentProbsFileName + "?");
            }
            else
            {
                // dont save probs if user cancelled save dialog
                return false;
            }
        }
        
        // If user did not cancel, save the probabilities
        // Output the results to a file
        PrintStream outPut = new PrintStream(file);
        outPut.println("Source dataset: " + fileName);
        outPut.println("Probabilities calculated from " + noSubsets + " subsets of size " + subsetSize + "\n");
        DecimalFormat df = new DecimalFormat("0.##"); 
        for(Integer setSize : optimalOccurence.keySet())
        {
            outPut.println("Probs for set size: " + setSize);
            String speciesStr = "Species: ";
            String probStr    = "Probs  : ";

            HashMap<Integer, Integer> tempOptimalOccurence = optimalOccurence.get(setSize);
            HashMap<Integer, Integer> tempSpeciesSetSizeUsage = speciesSetSizeUsage.get(setSize);
            List<Integer> keys = new ArrayList<>(tempOptimalOccurence.keySet());
            Collections.sort(keys);
            for(Integer speciesID : keys)
            {
                speciesStr += String.format("%1$5s", speciesID);
                double prob = tempOptimalOccurence.get(speciesID)/(double)(tempSpeciesSetSizeUsage.get(speciesID));
                probStr += String.format("%1$5s", df.format(prob));
            }
            outPut.println(speciesStr);
            outPut.println(probStr);
        }
        outPut.close();
        return true;
    }
    
    private boolean fileExists(File file)
    {
        if(file.exists() && !file.isDirectory())
        {
            return true;
        }
        return false;
    }
    
    private String finishedThreads(int finished, int total)
    {
        return "Finished: " + finished + " of " + total;
    }
    
    
    /**
     * Sets text of 'timeLabel' to display constantly updating processing time 
     * until 'running' is set to false
     * 
     * @param running
     * @param timeLabel 
     */
    private void timerLabel(MutableBoolean running, JLabel timeLabel) {
        long startTime = System.nanoTime();
        new Thread() {
            @Override
            public void run() {
                while (running.isTrue()) {
                    double seconds = (System.nanoTime() - startTime) / 1000000000.0;
                    timeLabel.setText("Processing Time: " + toTimeString(seconds));
                    try {
                        Thread.sleep(91);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(SpecSelGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }.start();
    }
    
    // launches JChooser and returns path of file selected for load or save
    private String getTextFilePath(String option) {
        // use JFileChooser to select album text file
        try {
            String filePath;
            // launch file chooser in current working directory
            JFileChooser fileChooser = new JFileChooser(workingDir);

            //lock file chooser to working directory
            final File dirToLock = new File(workingDir);
            fileChooser.setFileView(new FileView() {
                @Override
                public Boolean isTraversable(File f) {
                    return dirToLock.equals(f);
                }
            });

            // filter for text files
            FileFilter filter = new FileNameExtensionFilter("Text File", "txt");
            fileChooser.setFileFilter(filter);

            // initiate load or save dialog according to option parameter
            Component c1 = null;
            if (option.equals("LOAD")) {
                fileChooserResult = fileChooser.showOpenDialog(c1);
            }
            else if (option.equals("SAVE")) {
                // disable cancel button
//                disableCancel(fileChooser);
                // set custom header text
                fileChooser.setDialogTitle("Specify file name to Save probabilities");
                fileChooserResult = fileChooser.showSaveDialog(c1);
            }

            // get users selected file and directory location
            File file = fileChooser.getSelectedFile();
            if (file != null) {
                filePath = file.getAbsolutePath();
                workingDir = file.getParentFile().getAbsolutePath();
                return getFilenameFromPath(filePath);
            }
        } catch (Exception e) {
            System.err.println("Error in getTextFilePath(): " + e);
        }
        return null;
    }
    
//    private void disableCancel(JFileChooser chooser)
//    {
//        chooser.get
//        ((JButton)((JPanel)chooser.getComponent(5)).getAccessibleContext().getAccessibleChild(5).getAccessibleContext().getAccessibleChild(2)).setVisible(false);
//    }

    // Method to exact filename and extension from absolutepath as string
    private String getFilenameFromPath(String filePath) {
        return Paths.get(filePath).getFileName().toString();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SpecSelGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SpecSelGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SpecSelGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SpecSelGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SpecSelGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonCancelA;
    private javax.swing.JButton jButtonCancelP;
    private javax.swing.JButton jButtonCancelProb;
    private javax.swing.JButton jButtonDeleteFiles;
    private javax.swing.JButton jButtonDeleteFilesA;
    private javax.swing.JButton jButtonGenerate;
    private javax.swing.JButton jButtonProblemSpecies;
    private javax.swing.JButton jButtonProcess;
    private javax.swing.JButton jButtonRunSubsets;
    private javax.swing.JButton jButtonSelectDataFileA;
    private javax.swing.JButton jButtonSelectDataFileP;
    private javax.swing.JButton jButtonSelectDataFileProb;
    private javax.swing.JButton jButtonViewResults;
    private javax.swing.JCheckBox jCheckBoxOverwriteProbs;
    private javax.swing.JCheckBox jCheckBoxTruncate;
    private javax.swing.JCheckBox jCheckBoxTruncateProbs;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelAllowedDiv;
    private javax.swing.JLabel jLabelErrorProbs;
    private javax.swing.JLabel jLabelFinishedThreads;
    private javax.swing.JLabel jLabelNoSpec;
    private javax.swing.JLabel jLabelNoSubsets;
    private javax.swing.JLabel jLabelProbSpec;
    private javax.swing.JLabel jLabelProcessCompletedTimeA;
    private javax.swing.JLabel jLabelProcessTime;
    private javax.swing.JLabel jLabelProcessTimeA;
    private javax.swing.JLabel jLabelProcessTimeProb;
    private javax.swing.JLabel jLabelSubsetSize;
    private javax.swing.JPanel jPanelAnalyse;
    private javax.swing.JPanel jPanelBottom;
    private javax.swing.JPanel jPanelLower;
    private javax.swing.JPanel jPanelProbLower;
    private javax.swing.JPanel jPanelProbUpper;
    private javax.swing.JPanel jPanelProbability;
    private javax.swing.JPanel jPanelProcess;
    private javax.swing.JPanel jPanelRadioButtons;
    private javax.swing.JPanel jPanelTop;
    private javax.swing.JPanel jPanelUpper;
    private javax.swing.JRadioButton jRadioButtonAll;
    private javax.swing.JRadioButton jRadioButtonFinal;
    private javax.swing.JRadioButton jRadioButtonNone;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPaneKey;
    private javax.swing.JScrollPane jScrollPanePoints;
    private javax.swing.JSpinner jSpinnerAllowableExpDivergencePct;
    private javax.swing.JSpinner jSpinnerInitialNoSpecies;
    private javax.swing.JSpinner jSpinnerNoSubsets;
    private javax.swing.JSpinner jSpinnerSubsetSize;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextAreaKey;
    private javax.swing.JTextArea jTextAreaPoints;
    private javax.swing.JTextArea jTextAreaSubsetFiles;
    private javax.swing.JTextField jTextFieldDataFilePath;
    private javax.swing.JTextField jTextFieldDataFilePathA;
    private javax.swing.JTextField jTextFieldFilePathProb;
    private javax.swing.JTextField jTextFieldProblemSpecies;
    // End of variables declaration//GEN-END:variables

    private Options getOption() {
        if (jRadioButtonNone.isSelected()) {
            return Options.NONE;
        } else if (jRadioButtonAll.isSelected()) {
            return Options.ALL;
        } else if (jRadioButtonFinal.isSelected()) {
            return Options.FINAL;
        } else {
            System.err.println("No Output Option Selected");
            return null;
        }
    }
}
